// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace modelo {

namespace {

const ::google::protobuf::Descriptor* RecuentoPalabras_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecuentoPalabras_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Link_LinkType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Badge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Badge_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Comment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Comment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vote_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Vote_VoteType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* History_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  History_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* History_HistoryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Post_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Post_reflection_ = NULL;
const ::google::protobuf::Descriptor* Post_Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Post_Stats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Post_PostType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  RecuentoPalabras_descriptor_ = file->message_type(0);
  static const int RecuentoPalabras_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecuentoPalabras, palabra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecuentoPalabras, repeticiones_),
  };
  RecuentoPalabras_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecuentoPalabras_descriptor_,
      RecuentoPalabras::default_instance_,
      RecuentoPalabras_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecuentoPalabras, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecuentoPalabras, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecuentoPalabras));
  Link_descriptor_ = file->message_type(1);
  static const int Link_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, related_post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, type_),
  };
  Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Link));
  Link_LinkType_descriptor_ = Link_descriptor_->enum_type(0);
  Badge_descriptor_ = file->message_type(2);
  static const int Badge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Badge, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Badge, date_),
  };
  Badge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Badge_descriptor_,
      Badge::default_instance_,
      Badge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Badge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Badge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Badge));
  User_descriptor_ = file->message_type(3);
  static const int User_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, views_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, up_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, down_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, last_access_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, web_site_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, profile_image_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, about_me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, badges_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  UserCollection_descriptor_ = file->message_type(4);
  static const int UserCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCollection, usuarios_),
  };
  UserCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCollection_descriptor_,
      UserCollection::default_instance_,
      UserCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCollection));
  Comment_descriptor_ = file->message_type(5);
  static const int Comment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, creation_date_),
  };
  Comment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Comment_descriptor_,
      Comment::default_instance_,
      Comment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Comment));
  Vote_descriptor_ = file->message_type(6);
  static const int Vote_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, bounty_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, creation_date_),
  };
  Vote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vote_descriptor_,
      Vote::default_instance_,
      Vote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vote));
  Vote_VoteType_descriptor_ = Vote_descriptor_->enum_type(0);
  History_descriptor_ = file->message_type(7);
  static const int History_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, text_),
  };
  History_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      History_descriptor_,
      History::default_instance_,
      History_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(History));
  History_HistoryType_descriptor_ = History_descriptor_->enum_type(0);
  Post_descriptor_ = file->message_type(8);
  static const int Post_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, accepted_answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, last_editor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, community_owned_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, closed_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, last_edit_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, last_activity_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, history_),
  };
  Post_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Post_descriptor_,
      Post::default_instance_,
      Post_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Post));
  Post_Stats_descriptor_ = Post_descriptor_->nested_type(0);
  static const int Post_Stats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, answer_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, favorite_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, view_count_),
  };
  Post_Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Post_Stats_descriptor_,
      Post_Stats::default_instance_,
      Post_Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post_Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Post_Stats));
  Post_PostType_descriptor_ = Post_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecuentoPalabras_descriptor_, &RecuentoPalabras::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Badge_descriptor_, &Badge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCollection_descriptor_, &UserCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Comment_descriptor_, &Comment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vote_descriptor_, &Vote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    History_descriptor_, &History::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Post_descriptor_, &Post::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Post_Stats_descriptor_, &Post_Stats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  delete RecuentoPalabras::default_instance_;
  delete RecuentoPalabras_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete Badge::default_instance_;
  delete Badge_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete UserCollection::default_instance_;
  delete UserCollection_reflection_;
  delete Comment::default_instance_;
  delete Comment_reflection_;
  delete Vote::default_instance_;
  delete Vote_reflection_;
  delete History::default_instance_;
  delete History_reflection_;
  delete Post::default_instance_;
  delete Post_reflection_;
  delete Post_Stats::default_instance_;
  delete Post_Stats_reflection_;
}

void protobuf_AddDesc_model_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\022\006modelo\"<\n\020RecuentoPalabra"
    "s\022\017\n\007palabra\030\001 \002(\t\022\027\n\014repeticiones\030\002 \001(\005"
    ":\0011\"\215\001\n\004Link\022\025\n\rcreation_date\030\001 \002(\003\022\"\n\014r"
    "elated_post\030\002 \001(\0132\014.modelo.Post\022#\n\004type\030"
    "\003 \002(\0162\025.modelo.Link.LinkType\"%\n\010LinkType"
    "\022\n\n\006LINKED\020\001\022\r\n\tDUPLICATE\020\002\"#\n\005Badge\022\014\n\004"
    "name\030\001 \002(\t\022\014\n\004date\030\002 \002(\003\"\253\002\n\004User\022\r\n\005vie"
    "ws\030\001 \002(\005\022\022\n\nreputation\030\002 \002(\005\022\020\n\010up_votes"
    "\030\003 \002(\005\022\022\n\ndown_votes\030\004 \002(\005\022\025\n\rcreation_d"
    "ate\030\020 \002(\003\022\024\n\014display_name\030\t \002(\t\022\030\n\020last_"
    "access_date\030\n \002(\003\022\024\n\014web_site_url\030\017 \001(\t\022"
    "\031\n\021profile_image_url\030\016 \001(\t\022\020\n\010location\030\014"
    " \001(\t\022\020\n\010about_me\030\010 \002(\t\022\022\n\naccount_id\030\r \002"
    "(\005\022\013\n\003age\030\013 \002(\005\022\035\n\006badges\030\007 \003(\0132\r.modelo"
    ".Badge\"0\n\016UserCollection\022\036\n\010usuarios\030\001 \003"
    "(\0132\014.modelo.User\"s\n\007Comment\022\032\n\004user\030\001 \002("
    "\0132\014.modelo.User\022\r\n\005score\030\002 \002(\005\022&\n\004text\030\003"
    " \003(\0132\030.modelo.RecuentoPalabras\022\025\n\rcreati"
    "on_date\030\004 \002(\003\"\353\002\n\004Vote\022\025\n\rbounty_amount\030"
    "\001 \002(\005\022\032\n\004user\030\002 \002(\0132\014.modelo.User\022#\n\004typ"
    "e\030\003 \002(\0162\025.modelo.Vote.VoteType\022\025\n\rcreati"
    "on_date\030\004 \002(\003\"\363\001\n\010VoteType\022\032\n\026ACCEPTED_B"
    "Y_ORIGINATOR\020\001\022\n\n\006UP_MOD\020\002\022\014\n\010DOWN_MOD\020\003"
    "\022\r\n\tOFFENCIVE\020\004\022\014\n\010FAVORITE\020\005\022\t\n\005CLOSE\020\006"
    "\022\n\n\006REOPEN\020\007\022\020\n\014BOUNTY_START\020\010\022\020\n\014BOUNTY"
    "_CLOSE\020\t\022\014\n\010DELETION\020\n\022\016\n\nUNDELETION\020\013\022\010"
    "\n\004SPAM\020\014\022\024\n\020MODERATOR_REVIEW\020\017\022\033\n\027APPROV"
    "E_EDIT_SUGGESTION\020\020\"\352\006\n\007History\022\032\n\004user\030"
    "\001 \002(\0132\014.modelo.User\022\020\n\010revision\030\002 \002(\t\022\025\n"
    "\rcreation_date\030\003 \002(\003\022)\n\004type\030\004 \002(\0162\033.mod"
    "elo.History.HistoryType\022)\n\007comment\030\005 \002(\013"
    "2\030.modelo.RecuentoPalabras\022&\n\004text\030\006 \002(\013"
    "2\030.modelo.RecuentoPalabras\"\233\005\n\013HistoryTy"
    "pe\022\020\n\014INITIAL_TILE\020\001\022\020\n\014INITIAL_BODY\020\002\022\020"
    "\n\014INITIAL_TAGS\020\003\022\016\n\nEDIT_TITLE\020\004\022\r\n\tEDIT"
    "_BODY\020\005\022\r\n\tEDIT_TAGS\020\006\022\022\n\016ROLLBACK_TITLE"
    "\020\007\022\021\n\rROLLBACK_BODY\020\010\022\021\n\rROLLBACK_TAGS\020\t"
    "\022\017\n\013POST_CLOSED\020\n\022\021\n\rPOST_REOPENED\020\013\022\020\n\014"
    "POST_DELETED\020\014\022\022\n\016POST_UNDELETED\020\r\022\017\n\013PO"
    "ST_LOCKED\020\016\022\021\n\rPOST_UNLOCKED\020\017\022\023\n\017COMMUN"
    "ITY_OWNED\020\020\022\021\n\rPOST_MIGRATED\020\021\022\023\n\017QUESTI"
    "ON_MERGED\020\022\022\026\n\022QUESTION_PROTECTED\020\023\022\027\n\023Q"
    "UESTION_UPROTECTED\020\024\022\024\n\020POST_DISASSOCIED"
    "\020\025\022\025\n\021QUESTION_UNMERGED\020\026\022\032\n\026SUGGESTED_E"
    "DIT_APPLIED\020\030\022\020\n\014POST_TWEETED\020\031\022$\n COMME"
    "NT_DISCUSSION_MOVED_TO_CHAT\020\037\022\025\n\021POST_NO"
    "TICE_ADDED\020!\022\027\n\023POST_NOTICE_REMOVED\020\"\022\026\n"
    "\022POST_MIGRATED_AWAY\020#\022\026\n\022POST_MIGRATED_H"
    "ERE\020$\022\025\n\021POST_MERGE_SOURCE\020%\022\032\n\026POST_MER"
    "GE_DESTINATION\020&\"\262\006\n\004Post\022\034\n\006parent\030\017 \001("
    "\0132\014.modelo.Post\022%\n\017accepted_answer\030\001 \001(\013"
    "2\014.modelo.Post\022\033\n\005owner\030\r \002(\0132\014.modelo.U"
    "ser\022!\n\013last_editor\030\021 \001(\0132\014.modelo.User\022#"
    "\n\004type\030\003 \002(\0162\025.modelo.Post.PostType\022\025\n\rc"
    "reation_date\030\004 \002(\003\022&\n\004body\030\006 \003(\0132\030.model"
    "o.RecuentoPalabras\022\034\n\024community_owned_da"
    "te\030\020 \002(\005\022\023\n\013closed_date\030\005 \001(\003\022\026\n\016last_ed"
    "it_date\030\016 \001(\003\022\032\n\022last_activity_date\030\022 \001("
    "\003\022\'\n\005title\030\007 \003(\0132\030.modelo.RecuentoPalabr"
    "as\022!\n\005stats\030\002 \002(\0132\022.modelo.Post.Stats\022\033\n"
    "\005links\030\010 \003(\0132\014.modelo.Link\022!\n\010comments\030\t"
    " \003(\0132\017.modelo.Comment\022\014\n\004tags\030\n \003(\t\022\033\n\005v"
    "otes\030\013 \003(\0132\014.modelo.Vote\022 \n\007history\030\014 \003("
    "\0132\017.modelo.History\032o\n\005Stats\022\r\n\005score\030\001 \002"
    "(\005\022\024\n\014answer_count\030\002 \002(\005\022\025\n\rcomment_coun"
    "t\030\003 \002(\005\022\026\n\016favorite_count\030\004 \002(\005\022\022\n\nview_"
    "count\030\005 \002(\005\"\217\001\n\010PostType\022\014\n\010QUESTION\020\001\022\n"
    "\n\006ANSWER\020\002\022\025\n\021ORPHANED_TAG_WIKI\020\003\022\024\n\020TAG"
    "_WIKI_EXCERPT\020\004\022\014\n\010TAG_WIKI\020\005\022\030\n\024MODERAT"
    "OR_NOMINATION\020\006\022\024\n\020WIKI_PLACEHOLDER\020\007", 2797);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  RecuentoPalabras::default_instance_ = new RecuentoPalabras();
  Link::default_instance_ = new Link();
  Badge::default_instance_ = new Badge();
  User::default_instance_ = new User();
  UserCollection::default_instance_ = new UserCollection();
  Comment::default_instance_ = new Comment();
  Vote::default_instance_ = new Vote();
  History::default_instance_ = new History();
  Post::default_instance_ = new Post();
  Post_Stats::default_instance_ = new Post_Stats();
  RecuentoPalabras::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  Badge::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  UserCollection::default_instance_->InitAsDefaultInstance();
  Comment::default_instance_->InitAsDefaultInstance();
  Vote::default_instance_->InitAsDefaultInstance();
  History::default_instance_->InitAsDefaultInstance();
  Post::default_instance_->InitAsDefaultInstance();
  Post_Stats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecuentoPalabras::kPalabraFieldNumber;
const int RecuentoPalabras::kRepeticionesFieldNumber;
#endif  // !_MSC_VER

RecuentoPalabras::RecuentoPalabras()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.RecuentoPalabras)
}

void RecuentoPalabras::InitAsDefaultInstance() {
}

RecuentoPalabras::RecuentoPalabras(const RecuentoPalabras& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.RecuentoPalabras)
}

void RecuentoPalabras::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  palabra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repeticiones_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecuentoPalabras::~RecuentoPalabras() {
  // @@protoc_insertion_point(destructor:modelo.RecuentoPalabras)
  SharedDtor();
}

void RecuentoPalabras::SharedDtor() {
  if (palabra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete palabra_;
  }
  if (this != default_instance_) {
  }
}

void RecuentoPalabras::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecuentoPalabras::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecuentoPalabras_descriptor_;
}

const RecuentoPalabras& RecuentoPalabras::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

RecuentoPalabras* RecuentoPalabras::default_instance_ = NULL;

RecuentoPalabras* RecuentoPalabras::New() const {
  return new RecuentoPalabras;
}

void RecuentoPalabras::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_palabra()) {
      if (palabra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        palabra_->clear();
      }
    }
    repeticiones_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecuentoPalabras::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.RecuentoPalabras)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string palabra = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_palabra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->palabra().data(), this->palabra().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "palabra");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeticiones;
        break;
      }

      // optional int32 repeticiones = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_repeticiones:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeticiones_)));
          set_has_repeticiones();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.RecuentoPalabras)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.RecuentoPalabras)
  return false;
#undef DO_
}

void RecuentoPalabras::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.RecuentoPalabras)
  // required string palabra = 1;
  if (has_palabra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->palabra().data(), this->palabra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "palabra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->palabra(), output);
  }

  // optional int32 repeticiones = 2 [default = 1];
  if (has_repeticiones()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repeticiones(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.RecuentoPalabras)
}

::google::protobuf::uint8* RecuentoPalabras::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.RecuentoPalabras)
  // required string palabra = 1;
  if (has_palabra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->palabra().data(), this->palabra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "palabra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->palabra(), target);
  }

  // optional int32 repeticiones = 2 [default = 1];
  if (has_repeticiones()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repeticiones(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.RecuentoPalabras)
  return target;
}

int RecuentoPalabras::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string palabra = 1;
    if (has_palabra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->palabra());
    }

    // optional int32 repeticiones = 2 [default = 1];
    if (has_repeticiones()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeticiones());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecuentoPalabras::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecuentoPalabras* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecuentoPalabras*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecuentoPalabras::MergeFrom(const RecuentoPalabras& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palabra()) {
      set_palabra(from.palabra());
    }
    if (from.has_repeticiones()) {
      set_repeticiones(from.repeticiones());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecuentoPalabras::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecuentoPalabras::CopyFrom(const RecuentoPalabras& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecuentoPalabras::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RecuentoPalabras::Swap(RecuentoPalabras* other) {
  if (other != this) {
    std::swap(palabra_, other->palabra_);
    std::swap(repeticiones_, other->repeticiones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecuentoPalabras::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecuentoPalabras_descriptor_;
  metadata.reflection = RecuentoPalabras_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Link_LinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_LinkType_descriptor_;
}
bool Link_LinkType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Link_LinkType Link::LINKED;
const Link_LinkType Link::DUPLICATE;
const Link_LinkType Link::LinkType_MIN;
const Link_LinkType Link::LinkType_MAX;
const int Link::LinkType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Link::kCreationDateFieldNumber;
const int Link::kRelatedPostFieldNumber;
const int Link::kTypeFieldNumber;
#endif  // !_MSC_VER

Link::Link()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.Link)
}

void Link::InitAsDefaultInstance() {
  related_post_ = const_cast< ::modelo::Post*>(&::modelo::Post::default_instance());
}

Link::Link(const Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.Link)
}

void Link::SharedCtor() {
  _cached_size_ = 0;
  creation_date_ = GOOGLE_LONGLONG(0);
  related_post_ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:modelo.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (this != default_instance_) {
    delete related_post_;
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New() const {
  return new Link;
}

void Link::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    creation_date_ = GOOGLE_LONGLONG(0);
    if (has_related_post()) {
      if (related_post_ != NULL) related_post_->::modelo::Post::Clear();
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 creation_date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_related_post;
        break;
      }

      // optional .modelo.Post related_post = 2;
      case 2: {
        if (tag == 18) {
         parse_related_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_related_post()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .modelo.Link.LinkType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::modelo::Link_LinkType_IsValid(value)) {
            set_type(static_cast< ::modelo::Link_LinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.Link)
  // required int64 creation_date = 1;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->creation_date(), output);
  }

  // optional .modelo.Post related_post = 2;
  if (has_related_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->related_post(), output);
  }

  // required .modelo.Link.LinkType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.Link)
  // required int64 creation_date = 1;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->creation_date(), target);
  }

  // optional .modelo.Post related_post = 2;
  if (has_related_post()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->related_post(), target);
  }

  // required .modelo.Link.LinkType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 creation_date = 1;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

    // optional .modelo.Post related_post = 2;
    if (has_related_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->related_post());
    }

    // required .modelo.Link.LinkType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
    if (from.has_related_post()) {
      mutable_related_post()->::modelo::Post::MergeFrom(from.related_post());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_related_post()) {
    if (!this->related_post().IsInitialized()) return false;
  }
  return true;
}

void Link::Swap(Link* other) {
  if (other != this) {
    std::swap(creation_date_, other->creation_date_);
    std::swap(related_post_, other->related_post_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Badge::kNameFieldNumber;
const int Badge::kDateFieldNumber;
#endif  // !_MSC_VER

Badge::Badge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.Badge)
}

void Badge::InitAsDefaultInstance() {
}

Badge::Badge(const Badge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.Badge)
}

void Badge::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Badge::~Badge() {
  // @@protoc_insertion_point(destructor:modelo.Badge)
  SharedDtor();
}

void Badge::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Badge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Badge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Badge_descriptor_;
}

const Badge& Badge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Badge* Badge::default_instance_ = NULL;

Badge* Badge::New() const {
  return new Badge;
}

void Badge::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    date_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Badge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.Badge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_date;
        break;
      }

      // required int64 date = 2;
      case 2: {
        if (tag == 16) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.Badge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.Badge)
  return false;
#undef DO_
}

void Badge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.Badge)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.Badge)
}

::google::protobuf::uint8* Badge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.Badge)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.Badge)
  return target;
}

int Badge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Badge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Badge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Badge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Badge::MergeFrom(const Badge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Badge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Badge::CopyFrom(const Badge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Badge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Badge::Swap(Badge* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Badge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Badge_descriptor_;
  metadata.reflection = Badge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kViewsFieldNumber;
const int User::kReputationFieldNumber;
const int User::kUpVotesFieldNumber;
const int User::kDownVotesFieldNumber;
const int User::kCreationDateFieldNumber;
const int User::kDisplayNameFieldNumber;
const int User::kLastAccessDateFieldNumber;
const int User::kWebSiteUrlFieldNumber;
const int User::kProfileImageUrlFieldNumber;
const int User::kLocationFieldNumber;
const int User::kAboutMeFieldNumber;
const int User::kAccountIdFieldNumber;
const int User::kAgeFieldNumber;
const int User::kBadgesFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  views_ = 0;
  reputation_ = 0;
  up_votes_ = 0;
  down_votes_ = 0;
  creation_date_ = GOOGLE_LONGLONG(0);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_access_date_ = GOOGLE_LONGLONG(0);
  web_site_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  about_me_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0;
  age_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:modelo.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (web_site_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete web_site_url_;
  }
  if (profile_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profile_image_url_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (about_me_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete about_me_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(views_, creation_date_);
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        display_name_->clear();
      }
    }
    last_access_date_ = GOOGLE_LONGLONG(0);
    if (has_web_site_url()) {
      if (web_site_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        web_site_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(account_id_, age_);
    if (has_profile_image_url()) {
      if (profile_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        profile_image_url_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
    if (has_about_me()) {
      if (about_me_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        about_me_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  badges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 views = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &views_)));
          set_has_views();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reputation;
        break;
      }

      // required int32 reputation = 2;
      case 2: {
        if (tag == 16) {
         parse_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
          set_has_reputation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_up_votes;
        break;
      }

      // required int32 up_votes = 3;
      case 3: {
        if (tag == 24) {
         parse_up_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_votes_)));
          set_has_up_votes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_down_votes;
        break;
      }

      // required int32 down_votes = 4;
      case 4: {
        if (tag == 32) {
         parse_down_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_votes_)));
          set_has_down_votes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_badges;
        break;
      }

      // repeated .modelo.Badge badges = 7;
      case 7: {
        if (tag == 58) {
         parse_badges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_badges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_badges;
        if (input->ExpectTag(66)) goto parse_about_me;
        break;
      }

      // required string about_me = 8;
      case 8: {
        if (tag == 66) {
         parse_about_me:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_about_me()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->about_me().data(), this->about_me().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "about_me");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_display_name;
        break;
      }

      // required string display_name = 9;
      case 9: {
        if (tag == 74) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "display_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_last_access_date;
        break;
      }

      // required int64 last_access_date = 10;
      case 10: {
        if (tag == 80) {
         parse_last_access_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_access_date_)));
          set_has_last_access_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_age;
        break;
      }

      // required int32 age = 11;
      case 11: {
        if (tag == 88) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_location;
        break;
      }

      // optional string location = 12;
      case 12: {
        if (tag == 98) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_account_id;
        break;
      }

      // required int32 account_id = 13;
      case 13: {
        if (tag == 104) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_profile_image_url;
        break;
      }

      // optional string profile_image_url = 14;
      case 14: {
        if (tag == 114) {
         parse_profile_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profile_image_url().data(), this->profile_image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "profile_image_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_web_site_url;
        break;
      }

      // optional string web_site_url = 15;
      case 15: {
        if (tag == 122) {
         parse_web_site_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_site_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->web_site_url().data(), this->web_site_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "web_site_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_creation_date;
        break;
      }

      // required int64 creation_date = 16;
      case 16: {
        if (tag == 128) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.User)
  // required int32 views = 1;
  if (has_views()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->views(), output);
  }

  // required int32 reputation = 2;
  if (has_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reputation(), output);
  }

  // required int32 up_votes = 3;
  if (has_up_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->up_votes(), output);
  }

  // required int32 down_votes = 4;
  if (has_down_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->down_votes(), output);
  }

  // repeated .modelo.Badge badges = 7;
  for (int i = 0; i < this->badges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->badges(i), output);
  }

  // required string about_me = 8;
  if (has_about_me()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->about_me().data(), this->about_me().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "about_me");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->about_me(), output);
  }

  // required string display_name = 9;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->display_name(), output);
  }

  // required int64 last_access_date = 10;
  if (has_last_access_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->last_access_date(), output);
  }

  // required int32 age = 11;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->age(), output);
  }

  // optional string location = 12;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->location(), output);
  }

  // required int32 account_id = 13;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->account_id(), output);
  }

  // optional string profile_image_url = 14;
  if (has_profile_image_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_image_url().data(), this->profile_image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "profile_image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->profile_image_url(), output);
  }

  // optional string web_site_url = 15;
  if (has_web_site_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_site_url().data(), this->web_site_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "web_site_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->web_site_url(), output);
  }

  // required int64 creation_date = 16;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->creation_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.User)
  // required int32 views = 1;
  if (has_views()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->views(), target);
  }

  // required int32 reputation = 2;
  if (has_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reputation(), target);
  }

  // required int32 up_votes = 3;
  if (has_up_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->up_votes(), target);
  }

  // required int32 down_votes = 4;
  if (has_down_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->down_votes(), target);
  }

  // repeated .modelo.Badge badges = 7;
  for (int i = 0; i < this->badges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->badges(i), target);
  }

  // required string about_me = 8;
  if (has_about_me()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->about_me().data(), this->about_me().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "about_me");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->about_me(), target);
  }

  // required string display_name = 9;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->display_name(), target);
  }

  // required int64 last_access_date = 10;
  if (has_last_access_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->last_access_date(), target);
  }

  // required int32 age = 11;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->age(), target);
  }

  // optional string location = 12;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->location(), target);
  }

  // required int32 account_id = 13;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->account_id(), target);
  }

  // optional string profile_image_url = 14;
  if (has_profile_image_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_image_url().data(), this->profile_image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "profile_image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->profile_image_url(), target);
  }

  // optional string web_site_url = 15;
  if (has_web_site_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_site_url().data(), this->web_site_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "web_site_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->web_site_url(), target);
  }

  // required int64 creation_date = 16;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->creation_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 views = 1;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->views());
    }

    // required int32 reputation = 2;
    if (has_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputation());
    }

    // required int32 up_votes = 3;
    if (has_up_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->up_votes());
    }

    // required int32 down_votes = 4;
    if (has_down_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->down_votes());
    }

    // required int64 creation_date = 16;
    if (has_creation_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

    // required string display_name = 9;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // required int64 last_access_date = 10;
    if (has_last_access_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_access_date());
    }

    // optional string web_site_url = 15;
    if (has_web_site_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_site_url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string profile_image_url = 14;
    if (has_profile_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile_image_url());
    }

    // optional string location = 12;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // required string about_me = 8;
    if (has_about_me()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->about_me());
    }

    // required int32 account_id = 13;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // required int32 age = 11;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

  }
  // repeated .modelo.Badge badges = 7;
  total_size += 1 * this->badges_size();
  for (int i = 0; i < this->badges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->badges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  badges_.MergeFrom(from.badges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_views()) {
      set_views(from.views());
    }
    if (from.has_reputation()) {
      set_reputation(from.reputation());
    }
    if (from.has_up_votes()) {
      set_up_votes(from.up_votes());
    }
    if (from.has_down_votes()) {
      set_down_votes(from.down_votes());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_last_access_date()) {
      set_last_access_date(from.last_access_date());
    }
    if (from.has_web_site_url()) {
      set_web_site_url(from.web_site_url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profile_image_url()) {
      set_profile_image_url(from.profile_image_url());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_about_me()) {
      set_about_me(from.about_me());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001c7f) != 0x00001c7f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->badges())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(views_, other->views_);
    std::swap(reputation_, other->reputation_);
    std::swap(up_votes_, other->up_votes_);
    std::swap(down_votes_, other->down_votes_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(display_name_, other->display_name_);
    std::swap(last_access_date_, other->last_access_date_);
    std::swap(web_site_url_, other->web_site_url_);
    std::swap(profile_image_url_, other->profile_image_url_);
    std::swap(location_, other->location_);
    std::swap(about_me_, other->about_me_);
    std::swap(account_id_, other->account_id_);
    std::swap(age_, other->age_);
    badges_.Swap(&other->badges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCollection::kUsuariosFieldNumber;
#endif  // !_MSC_VER

UserCollection::UserCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.UserCollection)
}

void UserCollection::InitAsDefaultInstance() {
}

UserCollection::UserCollection(const UserCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.UserCollection)
}

void UserCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCollection::~UserCollection() {
  // @@protoc_insertion_point(destructor:modelo.UserCollection)
  SharedDtor();
}

void UserCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCollection_descriptor_;
}

const UserCollection& UserCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

UserCollection* UserCollection::default_instance_ = NULL;

UserCollection* UserCollection::New() const {
  return new UserCollection;
}

void UserCollection::Clear() {
  usuarios_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.UserCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .modelo.User usuarios = 1;
      case 1: {
        if (tag == 10) {
         parse_usuarios:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usuarios()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_usuarios;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.UserCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.UserCollection)
  return false;
#undef DO_
}

void UserCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.UserCollection)
  // repeated .modelo.User usuarios = 1;
  for (int i = 0; i < this->usuarios_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usuarios(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.UserCollection)
}

::google::protobuf::uint8* UserCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.UserCollection)
  // repeated .modelo.User usuarios = 1;
  for (int i = 0; i < this->usuarios_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usuarios(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.UserCollection)
  return target;
}

int UserCollection::ByteSize() const {
  int total_size = 0;

  // repeated .modelo.User usuarios = 1;
  total_size += 1 * this->usuarios_size();
  for (int i = 0; i < this->usuarios_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usuarios(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCollection::MergeFrom(const UserCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  usuarios_.MergeFrom(from.usuarios_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCollection::CopyFrom(const UserCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCollection::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->usuarios())) return false;
  return true;
}

void UserCollection::Swap(UserCollection* other) {
  if (other != this) {
    usuarios_.Swap(&other->usuarios_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCollection_descriptor_;
  metadata.reflection = UserCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Comment::kUserFieldNumber;
const int Comment::kScoreFieldNumber;
const int Comment::kTextFieldNumber;
const int Comment::kCreationDateFieldNumber;
#endif  // !_MSC_VER

Comment::Comment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.Comment)
}

void Comment::InitAsDefaultInstance() {
  user_ = const_cast< ::modelo::User*>(&::modelo::User::default_instance());
}

Comment::Comment(const Comment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.Comment)
}

void Comment::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  score_ = 0;
  creation_date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:modelo.Comment)
  SharedDtor();
}

void Comment::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Comment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Comment_descriptor_;
}

const Comment& Comment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Comment* Comment::default_instance_ = NULL;

Comment* Comment::New() const {
  return new Comment;
}

void Comment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Comment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(creation_date_, score_);
    if (has_user()) {
      if (user_ != NULL) user_->::modelo::User::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  text_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .modelo.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // repeated .modelo.RecuentoPalabras text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        if (input->ExpectTag(32)) goto parse_creation_date;
        break;
      }

      // required int64 creation_date = 4;
      case 4: {
        if (tag == 32) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.Comment)
  return false;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.Comment)
  // required .modelo.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // repeated .modelo.RecuentoPalabras text = 3;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->text(i), output);
  }

  // required int64 creation_date = 4;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->creation_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.Comment)
}

::google::protobuf::uint8* Comment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.Comment)
  // required .modelo.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // repeated .modelo.RecuentoPalabras text = 3;
  for (int i = 0; i < this->text_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->text(i), target);
  }

  // required int64 creation_date = 4;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->creation_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.Comment)
  return target;
}

int Comment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .modelo.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int64 creation_date = 4;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

  }
  // repeated .modelo.RecuentoPalabras text = 3;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Comment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Comment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Comment::MergeFrom(const Comment& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_.MergeFrom(from.text_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::modelo::User::MergeFrom(from.user());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Comment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comment::CopyFrom(const Comment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->text())) return false;
  return true;
}

void Comment::Swap(Comment* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(score_, other->score_);
    text_.Swap(&other->text_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Comment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Comment_descriptor_;
  metadata.reflection = Comment_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Vote_VoteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vote_VoteType_descriptor_;
}
bool Vote_VoteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Vote_VoteType Vote::ACCEPTED_BY_ORIGINATOR;
const Vote_VoteType Vote::UP_MOD;
const Vote_VoteType Vote::DOWN_MOD;
const Vote_VoteType Vote::OFFENCIVE;
const Vote_VoteType Vote::FAVORITE;
const Vote_VoteType Vote::CLOSE;
const Vote_VoteType Vote::REOPEN;
const Vote_VoteType Vote::BOUNTY_START;
const Vote_VoteType Vote::BOUNTY_CLOSE;
const Vote_VoteType Vote::DELETION;
const Vote_VoteType Vote::UNDELETION;
const Vote_VoteType Vote::SPAM;
const Vote_VoteType Vote::MODERATOR_REVIEW;
const Vote_VoteType Vote::APPROVE_EDIT_SUGGESTION;
const Vote_VoteType Vote::VoteType_MIN;
const Vote_VoteType Vote::VoteType_MAX;
const int Vote::VoteType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Vote::kBountyAmountFieldNumber;
const int Vote::kUserFieldNumber;
const int Vote::kTypeFieldNumber;
const int Vote::kCreationDateFieldNumber;
#endif  // !_MSC_VER

Vote::Vote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.Vote)
}

void Vote::InitAsDefaultInstance() {
  user_ = const_cast< ::modelo::User*>(&::modelo::User::default_instance());
}

Vote::Vote(const Vote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.Vote)
}

void Vote::SharedCtor() {
  _cached_size_ = 0;
  bounty_amount_ = 0;
  user_ = NULL;
  type_ = 1;
  creation_date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:modelo.Vote)
  SharedDtor();
}

void Vote::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void Vote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vote_descriptor_;
}

const Vote& Vote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Vote* Vote::default_instance_ = NULL;

Vote* Vote::New() const {
  return new Vote;
}

void Vote::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    bounty_amount_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::modelo::User::Clear();
    }
    type_ = 1;
    creation_date_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.Vote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bounty_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bounty_amount_)));
          set_has_bounty_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required .modelo.User user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .modelo.Vote.VoteType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::modelo::Vote_VoteType_IsValid(value)) {
            set_type(static_cast< ::modelo::Vote_VoteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creation_date;
        break;
      }

      // required int64 creation_date = 4;
      case 4: {
        if (tag == 32) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.Vote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.Vote)
  return false;
#undef DO_
}

void Vote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.Vote)
  // required int32 bounty_amount = 1;
  if (has_bounty_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bounty_amount(), output);
  }

  // required .modelo.User user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  // required .modelo.Vote.VoteType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required int64 creation_date = 4;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->creation_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.Vote)
}

::google::protobuf::uint8* Vote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.Vote)
  // required int32 bounty_amount = 1;
  if (has_bounty_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bounty_amount(), target);
  }

  // required .modelo.User user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  // required .modelo.Vote.VoteType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required int64 creation_date = 4;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->creation_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.Vote)
  return target;
}

int Vote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bounty_amount = 1;
    if (has_bounty_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bounty_amount());
    }

    // required .modelo.User user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required .modelo.Vote.VoteType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 creation_date = 4;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bounty_amount()) {
      set_bounty_amount(from.bounty_amount());
    }
    if (from.has_user()) {
      mutable_user()->::modelo::User::MergeFrom(from.user());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void Vote::Swap(Vote* other) {
  if (other != this) {
    std::swap(bounty_amount_, other->bounty_amount_);
    std::swap(user_, other->user_);
    std::swap(type_, other->type_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vote_descriptor_;
  metadata.reflection = Vote_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* History_HistoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return History_HistoryType_descriptor_;
}
bool History_HistoryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const History_HistoryType History::INITIAL_TILE;
const History_HistoryType History::INITIAL_BODY;
const History_HistoryType History::INITIAL_TAGS;
const History_HistoryType History::EDIT_TITLE;
const History_HistoryType History::EDIT_BODY;
const History_HistoryType History::EDIT_TAGS;
const History_HistoryType History::ROLLBACK_TITLE;
const History_HistoryType History::ROLLBACK_BODY;
const History_HistoryType History::ROLLBACK_TAGS;
const History_HistoryType History::POST_CLOSED;
const History_HistoryType History::POST_REOPENED;
const History_HistoryType History::POST_DELETED;
const History_HistoryType History::POST_UNDELETED;
const History_HistoryType History::POST_LOCKED;
const History_HistoryType History::POST_UNLOCKED;
const History_HistoryType History::COMMUNITY_OWNED;
const History_HistoryType History::POST_MIGRATED;
const History_HistoryType History::QUESTION_MERGED;
const History_HistoryType History::QUESTION_PROTECTED;
const History_HistoryType History::QUESTION_UPROTECTED;
const History_HistoryType History::POST_DISASSOCIED;
const History_HistoryType History::QUESTION_UNMERGED;
const History_HistoryType History::SUGGESTED_EDIT_APPLIED;
const History_HistoryType History::POST_TWEETED;
const History_HistoryType History::COMMENT_DISCUSSION_MOVED_TO_CHAT;
const History_HistoryType History::POST_NOTICE_ADDED;
const History_HistoryType History::POST_NOTICE_REMOVED;
const History_HistoryType History::POST_MIGRATED_AWAY;
const History_HistoryType History::POST_MIGRATED_HERE;
const History_HistoryType History::POST_MERGE_SOURCE;
const History_HistoryType History::POST_MERGE_DESTINATION;
const History_HistoryType History::HistoryType_MIN;
const History_HistoryType History::HistoryType_MAX;
const int History::HistoryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int History::kUserFieldNumber;
const int History::kRevisionFieldNumber;
const int History::kCreationDateFieldNumber;
const int History::kTypeFieldNumber;
const int History::kCommentFieldNumber;
const int History::kTextFieldNumber;
#endif  // !_MSC_VER

History::History()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.History)
}

void History::InitAsDefaultInstance() {
  user_ = const_cast< ::modelo::User*>(&::modelo::User::default_instance());
  comment_ = const_cast< ::modelo::RecuentoPalabras*>(&::modelo::RecuentoPalabras::default_instance());
  text_ = const_cast< ::modelo::RecuentoPalabras*>(&::modelo::RecuentoPalabras::default_instance());
}

History::History(const History& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.History)
}

void History::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = NULL;
  revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creation_date_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  comment_ = NULL;
  text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

History::~History() {
  // @@protoc_insertion_point(destructor:modelo.History)
  SharedDtor();
}

void History::SharedDtor() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (this != default_instance_) {
    delete user_;
    delete comment_;
    delete text_;
  }
}

void History::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* History::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return History_descriptor_;
}

const History& History::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

History* History::default_instance_ = NULL;

History* History::New() const {
  return new History;
}

void History::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_user()) {
      if (user_ != NULL) user_->::modelo::User::Clear();
    }
    if (has_revision()) {
      if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revision_->clear();
      }
    }
    creation_date_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_comment()) {
      if (comment_ != NULL) comment_->::modelo::RecuentoPalabras::Clear();
    }
    if (has_text()) {
      if (text_ != NULL) text_->::modelo::RecuentoPalabras::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.History)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .modelo.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }

      // required string revision = 2;
      case 2: {
        if (tag == 18) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revision().data(), this->revision().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revision");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creation_date;
        break;
      }

      // required int64 creation_date = 3;
      case 3: {
        if (tag == 24) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .modelo.History.HistoryType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::modelo::History_HistoryType_IsValid(value)) {
            set_type(static_cast< ::modelo::History_HistoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // required .modelo.RecuentoPalabras comment = 5;
      case 5: {
        if (tag == 42) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // required .modelo.RecuentoPalabras text = 6;
      case 6: {
        if (tag == 50) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.History)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.History)
  return false;
#undef DO_
}

void History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.History)
  // required .modelo.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required string revision = 2;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->revision(), output);
  }

  // required int64 creation_date = 3;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->creation_date(), output);
  }

  // required .modelo.History.HistoryType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required .modelo.RecuentoPalabras comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->comment(), output);
  }

  // required .modelo.RecuentoPalabras text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.History)
}

::google::protobuf::uint8* History::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.History)
  // required .modelo.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required string revision = 2;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revision(), target);
  }

  // required int64 creation_date = 3;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->creation_date(), target);
  }

  // required .modelo.History.HistoryType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required .modelo.RecuentoPalabras comment = 5;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->comment(), target);
  }

  // required .modelo.RecuentoPalabras text = 6;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.History)
  return target;
}

int History::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .modelo.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required string revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revision());
    }

    // required int64 creation_date = 3;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

    // required .modelo.History.HistoryType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .modelo.RecuentoPalabras comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

    // required .modelo.RecuentoPalabras text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void History::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const History* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const History*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void History::MergeFrom(const History& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::modelo::User::MergeFrom(from.user());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_comment()) {
      mutable_comment()->::modelo::RecuentoPalabras::MergeFrom(from.comment());
    }
    if (from.has_text()) {
      mutable_text()->::modelo::RecuentoPalabras::MergeFrom(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void History::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void History::CopyFrom(const History& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool History::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_comment()) {
    if (!this->comment().IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  return true;
}

void History::Swap(History* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(revision_, other->revision_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(type_, other->type_);
    std::swap(comment_, other->comment_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata History::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = History_descriptor_;
  metadata.reflection = History_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Post_PostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Post_PostType_descriptor_;
}
bool Post_PostType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Post_PostType Post::QUESTION;
const Post_PostType Post::ANSWER;
const Post_PostType Post::ORPHANED_TAG_WIKI;
const Post_PostType Post::TAG_WIKI_EXCERPT;
const Post_PostType Post::TAG_WIKI;
const Post_PostType Post::MODERATOR_NOMINATION;
const Post_PostType Post::WIKI_PLACEHOLDER;
const Post_PostType Post::PostType_MIN;
const Post_PostType Post::PostType_MAX;
const int Post::PostType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Post_Stats::kScoreFieldNumber;
const int Post_Stats::kAnswerCountFieldNumber;
const int Post_Stats::kCommentCountFieldNumber;
const int Post_Stats::kFavoriteCountFieldNumber;
const int Post_Stats::kViewCountFieldNumber;
#endif  // !_MSC_VER

Post_Stats::Post_Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.Post.Stats)
}

void Post_Stats::InitAsDefaultInstance() {
}

Post_Stats::Post_Stats(const Post_Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.Post.Stats)
}

void Post_Stats::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  answer_count_ = 0;
  comment_count_ = 0;
  favorite_count_ = 0;
  view_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Post_Stats::~Post_Stats() {
  // @@protoc_insertion_point(destructor:modelo.Post.Stats)
  SharedDtor();
}

void Post_Stats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Post_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post_Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Post_Stats_descriptor_;
}

const Post_Stats& Post_Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Post_Stats* Post_Stats::default_instance_ = NULL;

Post_Stats* Post_Stats::New() const {
  return new Post_Stats;
}

void Post_Stats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Post_Stats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(score_, view_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Post_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.Post.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_answer_count;
        break;
      }

      // required int32 answer_count = 2;
      case 2: {
        if (tag == 16) {
         parse_answer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_count_)));
          set_has_answer_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comment_count;
        break;
      }

      // required int32 comment_count = 3;
      case 3: {
        if (tag == 24) {
         parse_comment_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_count_)));
          set_has_comment_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_favorite_count;
        break;
      }

      // required int32 favorite_count = 4;
      case 4: {
        if (tag == 32) {
         parse_favorite_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &favorite_count_)));
          set_has_favorite_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_view_count;
        break;
      }

      // required int32 view_count = 5;
      case 5: {
        if (tag == 40) {
         parse_view_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_count_)));
          set_has_view_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.Post.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.Post.Stats)
  return false;
#undef DO_
}

void Post_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.Post.Stats)
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // required int32 answer_count = 2;
  if (has_answer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->answer_count(), output);
  }

  // required int32 comment_count = 3;
  if (has_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comment_count(), output);
  }

  // required int32 favorite_count = 4;
  if (has_favorite_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->favorite_count(), output);
  }

  // required int32 view_count = 5;
  if (has_view_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->view_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.Post.Stats)
}

::google::protobuf::uint8* Post_Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.Post.Stats)
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // required int32 answer_count = 2;
  if (has_answer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->answer_count(), target);
  }

  // required int32 comment_count = 3;
  if (has_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comment_count(), target);
  }

  // required int32 favorite_count = 4;
  if (has_favorite_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->favorite_count(), target);
  }

  // required int32 view_count = 5;
  if (has_view_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->view_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.Post.Stats)
  return target;
}

int Post_Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 answer_count = 2;
    if (has_answer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer_count());
    }

    // required int32 comment_count = 3;
    if (has_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_count());
    }

    // required int32 favorite_count = 4;
    if (has_favorite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->favorite_count());
    }

    // required int32 view_count = 5;
    if (has_view_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post_Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Post_Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Post_Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Post_Stats::MergeFrom(const Post_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_answer_count()) {
      set_answer_count(from.answer_count());
    }
    if (from.has_comment_count()) {
      set_comment_count(from.comment_count());
    }
    if (from.has_favorite_count()) {
      set_favorite_count(from.favorite_count());
    }
    if (from.has_view_count()) {
      set_view_count(from.view_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Post_Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post_Stats::CopyFrom(const Post_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post_Stats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Post_Stats::Swap(Post_Stats* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(answer_count_, other->answer_count_);
    std::swap(comment_count_, other->comment_count_);
    std::swap(favorite_count_, other->favorite_count_);
    std::swap(view_count_, other->view_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Post_Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Post_Stats_descriptor_;
  metadata.reflection = Post_Stats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Post::kParentFieldNumber;
const int Post::kAcceptedAnswerFieldNumber;
const int Post::kOwnerFieldNumber;
const int Post::kLastEditorFieldNumber;
const int Post::kTypeFieldNumber;
const int Post::kCreationDateFieldNumber;
const int Post::kBodyFieldNumber;
const int Post::kCommunityOwnedDateFieldNumber;
const int Post::kClosedDateFieldNumber;
const int Post::kLastEditDateFieldNumber;
const int Post::kLastActivityDateFieldNumber;
const int Post::kTitleFieldNumber;
const int Post::kStatsFieldNumber;
const int Post::kLinksFieldNumber;
const int Post::kCommentsFieldNumber;
const int Post::kTagsFieldNumber;
const int Post::kVotesFieldNumber;
const int Post::kHistoryFieldNumber;
#endif  // !_MSC_VER

Post::Post()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modelo.Post)
}

void Post::InitAsDefaultInstance() {
  parent_ = const_cast< ::modelo::Post*>(&::modelo::Post::default_instance());
  accepted_answer_ = const_cast< ::modelo::Post*>(&::modelo::Post::default_instance());
  owner_ = const_cast< ::modelo::User*>(&::modelo::User::default_instance());
  last_editor_ = const_cast< ::modelo::User*>(&::modelo::User::default_instance());
  stats_ = const_cast< ::modelo::Post_Stats*>(&::modelo::Post_Stats::default_instance());
}

Post::Post(const Post& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modelo.Post)
}

void Post::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_ = NULL;
  accepted_answer_ = NULL;
  owner_ = NULL;
  last_editor_ = NULL;
  type_ = 1;
  creation_date_ = GOOGLE_LONGLONG(0);
  community_owned_date_ = 0;
  closed_date_ = GOOGLE_LONGLONG(0);
  last_edit_date_ = GOOGLE_LONGLONG(0);
  last_activity_date_ = GOOGLE_LONGLONG(0);
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Post::~Post() {
  // @@protoc_insertion_point(destructor:modelo.Post)
  SharedDtor();
}

void Post::SharedDtor() {
  if (this != default_instance_) {
    delete parent_;
    delete accepted_answer_;
    delete owner_;
    delete last_editor_;
    delete stats_;
  }
}

void Post::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Post_descriptor_;
}

const Post& Post::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Post* Post::default_instance_ = NULL;

Post* Post::New() const {
  return new Post;
}

void Post::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Post*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    if (has_parent()) {
      if (parent_ != NULL) parent_->::modelo::Post::Clear();
    }
    if (has_accepted_answer()) {
      if (accepted_answer_ != NULL) accepted_answer_->::modelo::Post::Clear();
    }
    if (has_owner()) {
      if (owner_ != NULL) owner_->::modelo::User::Clear();
    }
    if (has_last_editor()) {
      if (last_editor_ != NULL) last_editor_->::modelo::User::Clear();
    }
    type_ = 1;
    creation_date_ = GOOGLE_LONGLONG(0);
    community_owned_date_ = 0;
  }
  if (_has_bits_[8 / 32] & 5888) {
    ZR_(closed_date_, last_activity_date_);
    if (has_stats()) {
      if (stats_ != NULL) stats_->::modelo::Post_Stats::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  body_.Clear();
  title_.Clear();
  links_.Clear();
  comments_.Clear();
  tags_.Clear();
  votes_.Clear();
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Post::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modelo.Post)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .modelo.Post accepted_answer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepted_answer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // required .modelo.Post.Stats stats = 2;
      case 2: {
        if (tag == 18) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .modelo.Post.PostType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::modelo::Post_PostType_IsValid(value)) {
            set_type(static_cast< ::modelo::Post_PostType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creation_date;
        break;
      }

      // required int64 creation_date = 4;
      case 4: {
        if (tag == 32) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_closed_date;
        break;
      }

      // optional int64 closed_date = 5;
      case 5: {
        if (tag == 40) {
         parse_closed_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closed_date_)));
          set_has_closed_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_body;
        break;
      }

      // repeated .modelo.RecuentoPalabras body = 6;
      case 6: {
        if (tag == 50) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_body;
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // repeated .modelo.RecuentoPalabras title = 7;
      case 7: {
        if (tag == 58) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_title;
        if (input->ExpectTag(66)) goto parse_links;
        break;
      }

      // repeated .modelo.Link links = 8;
      case 8: {
        if (tag == 66) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_links;
        if (input->ExpectTag(74)) goto parse_comments;
        break;
      }

      // repeated .modelo.Comment comments = 9;
      case 9: {
        if (tag == 74) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_comments;
        if (input->ExpectTag(82)) goto parse_tags;
        break;
      }

      // repeated string tags = 10;
      case 10: {
        if (tag == 82) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tags;
        if (input->ExpectTag(90)) goto parse_votes;
        break;
      }

      // repeated .modelo.Vote votes = 11;
      case 11: {
        if (tag == 90) {
         parse_votes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_votes;
        if (input->ExpectTag(98)) goto parse_history;
        break;
      }

      // repeated .modelo.History history = 12;
      case 12: {
        if (tag == 98) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_history;
        if (input->ExpectTag(106)) goto parse_owner;
        break;
      }

      // required .modelo.User owner = 13;
      case 13: {
        if (tag == 106) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_last_edit_date;
        break;
      }

      // optional int64 last_edit_date = 14;
      case 14: {
        if (tag == 112) {
         parse_last_edit_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_edit_date_)));
          set_has_last_edit_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_parent;
        break;
      }

      // optional .modelo.Post parent = 15;
      case 15: {
        if (tag == 122) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_community_owned_date;
        break;
      }

      // required int32 community_owned_date = 16;
      case 16: {
        if (tag == 128) {
         parse_community_owned_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &community_owned_date_)));
          set_has_community_owned_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_last_editor;
        break;
      }

      // optional .modelo.User last_editor = 17;
      case 17: {
        if (tag == 138) {
         parse_last_editor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_editor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_last_activity_date;
        break;
      }

      // optional int64 last_activity_date = 18;
      case 18: {
        if (tag == 144) {
         parse_last_activity_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_activity_date_)));
          set_has_last_activity_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modelo.Post)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modelo.Post)
  return false;
#undef DO_
}

void Post::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modelo.Post)
  // optional .modelo.Post accepted_answer = 1;
  if (has_accepted_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accepted_answer(), output);
  }

  // required .modelo.Post.Stats stats = 2;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(), output);
  }

  // required .modelo.Post.PostType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required int64 creation_date = 4;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->creation_date(), output);
  }

  // optional int64 closed_date = 5;
  if (has_closed_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->closed_date(), output);
  }

  // repeated .modelo.RecuentoPalabras body = 6;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->body(i), output);
  }

  // repeated .modelo.RecuentoPalabras title = 7;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->title(i), output);
  }

  // repeated .modelo.Link links = 8;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->links(i), output);
  }

  // repeated .modelo.Comment comments = 9;
  for (int i = 0; i < this->comments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->comments(i), output);
  }

  // repeated string tags = 10;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tags(i), output);
  }

  // repeated .modelo.Vote votes = 11;
  for (int i = 0; i < this->votes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->votes(i), output);
  }

  // repeated .modelo.History history = 12;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->history(i), output);
  }

  // required .modelo.User owner = 13;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->owner(), output);
  }

  // optional int64 last_edit_date = 14;
  if (has_last_edit_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->last_edit_date(), output);
  }

  // optional .modelo.Post parent = 15;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->parent(), output);
  }

  // required int32 community_owned_date = 16;
  if (has_community_owned_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->community_owned_date(), output);
  }

  // optional .modelo.User last_editor = 17;
  if (has_last_editor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->last_editor(), output);
  }

  // optional int64 last_activity_date = 18;
  if (has_last_activity_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->last_activity_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modelo.Post)
}

::google::protobuf::uint8* Post::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelo.Post)
  // optional .modelo.Post accepted_answer = 1;
  if (has_accepted_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accepted_answer(), target);
  }

  // required .modelo.Post.Stats stats = 2;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(), target);
  }

  // required .modelo.Post.PostType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required int64 creation_date = 4;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->creation_date(), target);
  }

  // optional int64 closed_date = 5;
  if (has_closed_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->closed_date(), target);
  }

  // repeated .modelo.RecuentoPalabras body = 6;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->body(i), target);
  }

  // repeated .modelo.RecuentoPalabras title = 7;
  for (int i = 0; i < this->title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->title(i), target);
  }

  // repeated .modelo.Link links = 8;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->links(i), target);
  }

  // repeated .modelo.Comment comments = 9;
  for (int i = 0; i < this->comments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->comments(i), target);
  }

  // repeated string tags = 10;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->tags(i), target);
  }

  // repeated .modelo.Vote votes = 11;
  for (int i = 0; i < this->votes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->votes(i), target);
  }

  // repeated .modelo.History history = 12;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->history(i), target);
  }

  // required .modelo.User owner = 13;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->owner(), target);
  }

  // optional int64 last_edit_date = 14;
  if (has_last_edit_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->last_edit_date(), target);
  }

  // optional .modelo.Post parent = 15;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->parent(), target);
  }

  // required int32 community_owned_date = 16;
  if (has_community_owned_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->community_owned_date(), target);
  }

  // optional .modelo.User last_editor = 17;
  if (has_last_editor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->last_editor(), target);
  }

  // optional int64 last_activity_date = 18;
  if (has_last_activity_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->last_activity_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelo.Post)
  return target;
}

int Post::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .modelo.Post parent = 15;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // optional .modelo.Post accepted_answer = 1;
    if (has_accepted_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accepted_answer());
    }

    // required .modelo.User owner = 13;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

    // optional .modelo.User last_editor = 17;
    if (has_last_editor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_editor());
    }

    // required .modelo.Post.PostType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 creation_date = 4;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

    // required int32 community_owned_date = 16;
    if (has_community_owned_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->community_owned_date());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 closed_date = 5;
    if (has_closed_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->closed_date());
    }

    // optional int64 last_edit_date = 14;
    if (has_last_edit_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_edit_date());
    }

    // optional int64 last_activity_date = 18;
    if (has_last_activity_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_activity_date());
    }

    // required .modelo.Post.Stats stats = 2;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  // repeated .modelo.RecuentoPalabras body = 6;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  // repeated .modelo.RecuentoPalabras title = 7;
  total_size += 1 * this->title_size();
  for (int i = 0; i < this->title_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title(i));
  }

  // repeated .modelo.Link links = 8;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  // repeated .modelo.Comment comments = 9;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  // repeated string tags = 10;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .modelo.Vote votes = 11;
  total_size += 1 * this->votes_size();
  for (int i = 0; i < this->votes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->votes(i));
  }

  // repeated .modelo.History history = 12;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Post* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Post*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Post::MergeFrom(const Post& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  title_.MergeFrom(from.title_);
  links_.MergeFrom(from.links_);
  comments_.MergeFrom(from.comments_);
  tags_.MergeFrom(from.tags_);
  votes_.MergeFrom(from.votes_);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parent()) {
      mutable_parent()->::modelo::Post::MergeFrom(from.parent());
    }
    if (from.has_accepted_answer()) {
      mutable_accepted_answer()->::modelo::Post::MergeFrom(from.accepted_answer());
    }
    if (from.has_owner()) {
      mutable_owner()->::modelo::User::MergeFrom(from.owner());
    }
    if (from.has_last_editor()) {
      mutable_last_editor()->::modelo::User::MergeFrom(from.last_editor());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
    if (from.has_community_owned_date()) {
      set_community_owned_date(from.community_owned_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_closed_date()) {
      set_closed_date(from.closed_date());
    }
    if (from.has_last_edit_date()) {
      set_last_edit_date(from.last_edit_date());
    }
    if (from.has_last_activity_date()) {
      set_last_activity_date(from.last_activity_date());
    }
    if (from.has_stats()) {
      mutable_stats()->::modelo::Post_Stats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Post::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post::CopyFrom(const Post& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post::IsInitialized() const {
  if ((_has_bits_[0] & 0x000010b4) != 0x000010b4) return false;

  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  if (has_accepted_answer()) {
    if (!this->accepted_answer().IsInitialized()) return false;
  }
  if (has_owner()) {
    if (!this->owner().IsInitialized()) return false;
  }
  if (has_last_editor()) {
    if (!this->last_editor().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->body())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->title())) return false;
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->links())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->comments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->votes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->history())) return false;
  return true;
}

void Post::Swap(Post* other) {
  if (other != this) {
    std::swap(parent_, other->parent_);
    std::swap(accepted_answer_, other->accepted_answer_);
    std::swap(owner_, other->owner_);
    std::swap(last_editor_, other->last_editor_);
    std::swap(type_, other->type_);
    std::swap(creation_date_, other->creation_date_);
    body_.Swap(&other->body_);
    std::swap(community_owned_date_, other->community_owned_date_);
    std::swap(closed_date_, other->closed_date_);
    std::swap(last_edit_date_, other->last_edit_date_);
    std::swap(last_activity_date_, other->last_activity_date_);
    title_.Swap(&other->title_);
    std::swap(stats_, other->stats_);
    links_.Swap(&other->links_);
    comments_.Swap(&other->comments_);
    tags_.Swap(&other->tags_);
    votes_.Swap(&other->votes_);
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Post::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Post_descriptor_;
  metadata.reflection = Post_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace modelo

// @@protoc_insertion_point(global_scope)
