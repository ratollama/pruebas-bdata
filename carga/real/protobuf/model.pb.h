// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace modelo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class RecuentoPalabras;
class Link;
class Badge;
class User;
class UserCollection;
class Comment;
class Vote;
class History;
class Post;
class Post_Stats;

enum Link_LinkType {
  Link_LinkType_LINKED = 1,
  Link_LinkType_DUPLICATE = 2
};
bool Link_LinkType_IsValid(int value);
const Link_LinkType Link_LinkType_LinkType_MIN = Link_LinkType_LINKED;
const Link_LinkType Link_LinkType_LinkType_MAX = Link_LinkType_DUPLICATE;
const int Link_LinkType_LinkType_ARRAYSIZE = Link_LinkType_LinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Link_LinkType_descriptor();
inline const ::std::string& Link_LinkType_Name(Link_LinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Link_LinkType_descriptor(), value);
}
inline bool Link_LinkType_Parse(
    const ::std::string& name, Link_LinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Link_LinkType>(
    Link_LinkType_descriptor(), name, value);
}
enum Vote_VoteType {
  Vote_VoteType_ACCEPTED_BY_ORIGINATOR = 1,
  Vote_VoteType_UP_MOD = 2,
  Vote_VoteType_DOWN_MOD = 3,
  Vote_VoteType_OFFENCIVE = 4,
  Vote_VoteType_FAVORITE = 5,
  Vote_VoteType_CLOSE = 6,
  Vote_VoteType_REOPEN = 7,
  Vote_VoteType_BOUNTY_START = 8,
  Vote_VoteType_BOUNTY_CLOSE = 9,
  Vote_VoteType_DELETION = 10,
  Vote_VoteType_UNDELETION = 11,
  Vote_VoteType_SPAM = 12,
  Vote_VoteType_MODERATOR_REVIEW = 15,
  Vote_VoteType_APPROVE_EDIT_SUGGESTION = 16
};
bool Vote_VoteType_IsValid(int value);
const Vote_VoteType Vote_VoteType_VoteType_MIN = Vote_VoteType_ACCEPTED_BY_ORIGINATOR;
const Vote_VoteType Vote_VoteType_VoteType_MAX = Vote_VoteType_APPROVE_EDIT_SUGGESTION;
const int Vote_VoteType_VoteType_ARRAYSIZE = Vote_VoteType_VoteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vote_VoteType_descriptor();
inline const ::std::string& Vote_VoteType_Name(Vote_VoteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vote_VoteType_descriptor(), value);
}
inline bool Vote_VoteType_Parse(
    const ::std::string& name, Vote_VoteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vote_VoteType>(
    Vote_VoteType_descriptor(), name, value);
}
enum History_HistoryType {
  History_HistoryType_INITIAL_TILE = 1,
  History_HistoryType_INITIAL_BODY = 2,
  History_HistoryType_INITIAL_TAGS = 3,
  History_HistoryType_EDIT_TITLE = 4,
  History_HistoryType_EDIT_BODY = 5,
  History_HistoryType_EDIT_TAGS = 6,
  History_HistoryType_ROLLBACK_TITLE = 7,
  History_HistoryType_ROLLBACK_BODY = 8,
  History_HistoryType_ROLLBACK_TAGS = 9,
  History_HistoryType_POST_CLOSED = 10,
  History_HistoryType_POST_REOPENED = 11,
  History_HistoryType_POST_DELETED = 12,
  History_HistoryType_POST_UNDELETED = 13,
  History_HistoryType_POST_LOCKED = 14,
  History_HistoryType_POST_UNLOCKED = 15,
  History_HistoryType_COMMUNITY_OWNED = 16,
  History_HistoryType_POST_MIGRATED = 17,
  History_HistoryType_QUESTION_MERGED = 18,
  History_HistoryType_QUESTION_PROTECTED = 19,
  History_HistoryType_QUESTION_UPROTECTED = 20,
  History_HistoryType_POST_DISASSOCIED = 21,
  History_HistoryType_QUESTION_UNMERGED = 22,
  History_HistoryType_SUGGESTED_EDIT_APPLIED = 24,
  History_HistoryType_POST_TWEETED = 25,
  History_HistoryType_COMMENT_DISCUSSION_MOVED_TO_CHAT = 31,
  History_HistoryType_POST_NOTICE_ADDED = 33,
  History_HistoryType_POST_NOTICE_REMOVED = 34,
  History_HistoryType_POST_MIGRATED_AWAY = 35,
  History_HistoryType_POST_MIGRATED_HERE = 36,
  History_HistoryType_POST_MERGE_SOURCE = 37,
  History_HistoryType_POST_MERGE_DESTINATION = 38
};
bool History_HistoryType_IsValid(int value);
const History_HistoryType History_HistoryType_HistoryType_MIN = History_HistoryType_INITIAL_TILE;
const History_HistoryType History_HistoryType_HistoryType_MAX = History_HistoryType_POST_MERGE_DESTINATION;
const int History_HistoryType_HistoryType_ARRAYSIZE = History_HistoryType_HistoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* History_HistoryType_descriptor();
inline const ::std::string& History_HistoryType_Name(History_HistoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    History_HistoryType_descriptor(), value);
}
inline bool History_HistoryType_Parse(
    const ::std::string& name, History_HistoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<History_HistoryType>(
    History_HistoryType_descriptor(), name, value);
}
enum Post_PostType {
  Post_PostType_QUESTION = 1,
  Post_PostType_ANSWER = 2,
  Post_PostType_ORPHANED_TAG_WIKI = 3,
  Post_PostType_TAG_WIKI_EXCERPT = 4,
  Post_PostType_TAG_WIKI = 5,
  Post_PostType_MODERATOR_NOMINATION = 6,
  Post_PostType_WIKI_PLACEHOLDER = 7
};
bool Post_PostType_IsValid(int value);
const Post_PostType Post_PostType_PostType_MIN = Post_PostType_QUESTION;
const Post_PostType Post_PostType_PostType_MAX = Post_PostType_WIKI_PLACEHOLDER;
const int Post_PostType_PostType_ARRAYSIZE = Post_PostType_PostType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Post_PostType_descriptor();
inline const ::std::string& Post_PostType_Name(Post_PostType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Post_PostType_descriptor(), value);
}
inline bool Post_PostType_Parse(
    const ::std::string& name, Post_PostType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Post_PostType>(
    Post_PostType_descriptor(), name, value);
}
// ===================================================================

class RecuentoPalabras : public ::google::protobuf::Message {
 public:
  RecuentoPalabras();
  virtual ~RecuentoPalabras();

  RecuentoPalabras(const RecuentoPalabras& from);

  inline RecuentoPalabras& operator=(const RecuentoPalabras& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecuentoPalabras& default_instance();

  void Swap(RecuentoPalabras* other);

  // implements Message ----------------------------------------------

  RecuentoPalabras* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecuentoPalabras& from);
  void MergeFrom(const RecuentoPalabras& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string palabra = 1;
  inline bool has_palabra() const;
  inline void clear_palabra();
  static const int kPalabraFieldNumber = 1;
  inline const ::std::string& palabra() const;
  inline void set_palabra(const ::std::string& value);
  inline void set_palabra(const char* value);
  inline void set_palabra(const char* value, size_t size);
  inline ::std::string* mutable_palabra();
  inline ::std::string* release_palabra();
  inline void set_allocated_palabra(::std::string* palabra);

  // optional int32 repeticiones = 2 [default = 1];
  inline bool has_repeticiones() const;
  inline void clear_repeticiones();
  static const int kRepeticionesFieldNumber = 2;
  inline ::google::protobuf::int32 repeticiones() const;
  inline void set_repeticiones(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:modelo.RecuentoPalabras)
 private:
  inline void set_has_palabra();
  inline void clear_has_palabra();
  inline void set_has_repeticiones();
  inline void clear_has_repeticiones();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* palabra_;
  ::google::protobuf::int32 repeticiones_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static RecuentoPalabras* default_instance_;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  void Swap(Link* other);

  // implements Message ----------------------------------------------

  Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Link_LinkType LinkType;
  static const LinkType LINKED = Link_LinkType_LINKED;
  static const LinkType DUPLICATE = Link_LinkType_DUPLICATE;
  static inline bool LinkType_IsValid(int value) {
    return Link_LinkType_IsValid(value);
  }
  static const LinkType LinkType_MIN =
    Link_LinkType_LinkType_MIN;
  static const LinkType LinkType_MAX =
    Link_LinkType_LinkType_MAX;
  static const int LinkType_ARRAYSIZE =
    Link_LinkType_LinkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinkType_descriptor() {
    return Link_LinkType_descriptor();
  }
  static inline const ::std::string& LinkType_Name(LinkType value) {
    return Link_LinkType_Name(value);
  }
  static inline bool LinkType_Parse(const ::std::string& name,
      LinkType* value) {
    return Link_LinkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 creation_date = 1;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 1;
  inline ::google::protobuf::int64 creation_date() const;
  inline void set_creation_date(::google::protobuf::int64 value);

  // optional .modelo.Post related_post = 2;
  inline bool has_related_post() const;
  inline void clear_related_post();
  static const int kRelatedPostFieldNumber = 2;
  inline const ::modelo::Post& related_post() const;
  inline ::modelo::Post* mutable_related_post();
  inline ::modelo::Post* release_related_post();
  inline void set_allocated_related_post(::modelo::Post* related_post);

  // required .modelo.Link.LinkType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::modelo::Link_LinkType type() const;
  inline void set_type(::modelo::Link_LinkType value);

  // @@protoc_insertion_point(class_scope:modelo.Link)
 private:
  inline void set_has_creation_date();
  inline void clear_has_creation_date();
  inline void set_has_related_post();
  inline void clear_has_related_post();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 creation_date_;
  ::modelo::Post* related_post_;
  int type_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// -------------------------------------------------------------------

class Badge : public ::google::protobuf::Message {
 public:
  Badge();
  virtual ~Badge();

  Badge(const Badge& from);

  inline Badge& operator=(const Badge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Badge& default_instance();

  void Swap(Badge* other);

  // implements Message ----------------------------------------------

  Badge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Badge& from);
  void MergeFrom(const Badge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::int64 date() const;
  inline void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:modelo.Badge)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int64 date_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Badge* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 views = 1;
  inline bool has_views() const;
  inline void clear_views();
  static const int kViewsFieldNumber = 1;
  inline ::google::protobuf::int32 views() const;
  inline void set_views(::google::protobuf::int32 value);

  // required int32 reputation = 2;
  inline bool has_reputation() const;
  inline void clear_reputation();
  static const int kReputationFieldNumber = 2;
  inline ::google::protobuf::int32 reputation() const;
  inline void set_reputation(::google::protobuf::int32 value);

  // required int32 up_votes = 3;
  inline bool has_up_votes() const;
  inline void clear_up_votes();
  static const int kUpVotesFieldNumber = 3;
  inline ::google::protobuf::int32 up_votes() const;
  inline void set_up_votes(::google::protobuf::int32 value);

  // required int32 down_votes = 4;
  inline bool has_down_votes() const;
  inline void clear_down_votes();
  static const int kDownVotesFieldNumber = 4;
  inline ::google::protobuf::int32 down_votes() const;
  inline void set_down_votes(::google::protobuf::int32 value);

  // required int64 creation_date = 16;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 16;
  inline ::google::protobuf::int64 creation_date() const;
  inline void set_creation_date(::google::protobuf::int64 value);

  // required string display_name = 9;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 9;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // required int64 last_access_date = 10;
  inline bool has_last_access_date() const;
  inline void clear_last_access_date();
  static const int kLastAccessDateFieldNumber = 10;
  inline ::google::protobuf::int64 last_access_date() const;
  inline void set_last_access_date(::google::protobuf::int64 value);

  // optional string web_site_url = 15;
  inline bool has_web_site_url() const;
  inline void clear_web_site_url();
  static const int kWebSiteUrlFieldNumber = 15;
  inline const ::std::string& web_site_url() const;
  inline void set_web_site_url(const ::std::string& value);
  inline void set_web_site_url(const char* value);
  inline void set_web_site_url(const char* value, size_t size);
  inline ::std::string* mutable_web_site_url();
  inline ::std::string* release_web_site_url();
  inline void set_allocated_web_site_url(::std::string* web_site_url);

  // optional string profile_image_url = 14;
  inline bool has_profile_image_url() const;
  inline void clear_profile_image_url();
  static const int kProfileImageUrlFieldNumber = 14;
  inline const ::std::string& profile_image_url() const;
  inline void set_profile_image_url(const ::std::string& value);
  inline void set_profile_image_url(const char* value);
  inline void set_profile_image_url(const char* value, size_t size);
  inline ::std::string* mutable_profile_image_url();
  inline ::std::string* release_profile_image_url();
  inline void set_allocated_profile_image_url(::std::string* profile_image_url);

  // optional string location = 12;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 12;
  inline const ::std::string& location() const;
  inline void set_location(const ::std::string& value);
  inline void set_location(const char* value);
  inline void set_location(const char* value, size_t size);
  inline ::std::string* mutable_location();
  inline ::std::string* release_location();
  inline void set_allocated_location(::std::string* location);

  // required string about_me = 8;
  inline bool has_about_me() const;
  inline void clear_about_me();
  static const int kAboutMeFieldNumber = 8;
  inline const ::std::string& about_me() const;
  inline void set_about_me(const ::std::string& value);
  inline void set_about_me(const char* value);
  inline void set_about_me(const char* value, size_t size);
  inline ::std::string* mutable_about_me();
  inline ::std::string* release_about_me();
  inline void set_allocated_about_me(::std::string* about_me);

  // required int32 account_id = 13;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 13;
  inline ::google::protobuf::int32 account_id() const;
  inline void set_account_id(::google::protobuf::int32 value);

  // required int32 age = 11;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 11;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // repeated .modelo.Badge badges = 7;
  inline int badges_size() const;
  inline void clear_badges();
  static const int kBadgesFieldNumber = 7;
  inline const ::modelo::Badge& badges(int index) const;
  inline ::modelo::Badge* mutable_badges(int index);
  inline ::modelo::Badge* add_badges();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::Badge >&
      badges() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::Badge >*
      mutable_badges();

  // @@protoc_insertion_point(class_scope:modelo.User)
 private:
  inline void set_has_views();
  inline void clear_has_views();
  inline void set_has_reputation();
  inline void clear_has_reputation();
  inline void set_has_up_votes();
  inline void clear_has_up_votes();
  inline void set_has_down_votes();
  inline void clear_has_down_votes();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_last_access_date();
  inline void clear_has_last_access_date();
  inline void set_has_web_site_url();
  inline void clear_has_web_site_url();
  inline void set_has_profile_image_url();
  inline void clear_has_profile_image_url();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_about_me();
  inline void clear_has_about_me();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 views_;
  ::google::protobuf::int32 reputation_;
  ::google::protobuf::int32 up_votes_;
  ::google::protobuf::int32 down_votes_;
  ::google::protobuf::int64 creation_date_;
  ::std::string* display_name_;
  ::google::protobuf::int64 last_access_date_;
  ::std::string* web_site_url_;
  ::std::string* profile_image_url_;
  ::std::string* location_;
  ::std::string* about_me_;
  ::google::protobuf::int32 account_id_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::RepeatedPtrField< ::modelo::Badge > badges_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class UserCollection : public ::google::protobuf::Message {
 public:
  UserCollection();
  virtual ~UserCollection();

  UserCollection(const UserCollection& from);

  inline UserCollection& operator=(const UserCollection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCollection& default_instance();

  void Swap(UserCollection* other);

  // implements Message ----------------------------------------------

  UserCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCollection& from);
  void MergeFrom(const UserCollection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .modelo.User usuarios = 1;
  inline int usuarios_size() const;
  inline void clear_usuarios();
  static const int kUsuariosFieldNumber = 1;
  inline const ::modelo::User& usuarios(int index) const;
  inline ::modelo::User* mutable_usuarios(int index);
  inline ::modelo::User* add_usuarios();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::User >&
      usuarios() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::User >*
      mutable_usuarios();

  // @@protoc_insertion_point(class_scope:modelo.UserCollection)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::modelo::User > usuarios_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static UserCollection* default_instance_;
};
// -------------------------------------------------------------------

class Comment : public ::google::protobuf::Message {
 public:
  Comment();
  virtual ~Comment();

  Comment(const Comment& from);

  inline Comment& operator=(const Comment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Comment& default_instance();

  void Swap(Comment* other);

  // implements Message ----------------------------------------------

  Comment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Comment& from);
  void MergeFrom(const Comment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .modelo.User user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::modelo::User& user() const;
  inline ::modelo::User* mutable_user();
  inline ::modelo::User* release_user();
  inline void set_allocated_user(::modelo::User* user);

  // required int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // repeated .modelo.RecuentoPalabras text = 3;
  inline int text_size() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::modelo::RecuentoPalabras& text(int index) const;
  inline ::modelo::RecuentoPalabras* mutable_text(int index);
  inline ::modelo::RecuentoPalabras* add_text();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >&
      text() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >*
      mutable_text();

  // required int64 creation_date = 4;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 4;
  inline ::google::protobuf::int64 creation_date() const;
  inline void set_creation_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:modelo.Comment)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::modelo::User* user_;
  ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras > text_;
  ::google::protobuf::int64 creation_date_;
  ::google::protobuf::int32 score_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Comment* default_instance_;
};
// -------------------------------------------------------------------

class Vote : public ::google::protobuf::Message {
 public:
  Vote();
  virtual ~Vote();

  Vote(const Vote& from);

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vote& default_instance();

  void Swap(Vote* other);

  // implements Message ----------------------------------------------

  Vote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vote& from);
  void MergeFrom(const Vote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Vote_VoteType VoteType;
  static const VoteType ACCEPTED_BY_ORIGINATOR = Vote_VoteType_ACCEPTED_BY_ORIGINATOR;
  static const VoteType UP_MOD = Vote_VoteType_UP_MOD;
  static const VoteType DOWN_MOD = Vote_VoteType_DOWN_MOD;
  static const VoteType OFFENCIVE = Vote_VoteType_OFFENCIVE;
  static const VoteType FAVORITE = Vote_VoteType_FAVORITE;
  static const VoteType CLOSE = Vote_VoteType_CLOSE;
  static const VoteType REOPEN = Vote_VoteType_REOPEN;
  static const VoteType BOUNTY_START = Vote_VoteType_BOUNTY_START;
  static const VoteType BOUNTY_CLOSE = Vote_VoteType_BOUNTY_CLOSE;
  static const VoteType DELETION = Vote_VoteType_DELETION;
  static const VoteType UNDELETION = Vote_VoteType_UNDELETION;
  static const VoteType SPAM = Vote_VoteType_SPAM;
  static const VoteType MODERATOR_REVIEW = Vote_VoteType_MODERATOR_REVIEW;
  static const VoteType APPROVE_EDIT_SUGGESTION = Vote_VoteType_APPROVE_EDIT_SUGGESTION;
  static inline bool VoteType_IsValid(int value) {
    return Vote_VoteType_IsValid(value);
  }
  static const VoteType VoteType_MIN =
    Vote_VoteType_VoteType_MIN;
  static const VoteType VoteType_MAX =
    Vote_VoteType_VoteType_MAX;
  static const int VoteType_ARRAYSIZE =
    Vote_VoteType_VoteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VoteType_descriptor() {
    return Vote_VoteType_descriptor();
  }
  static inline const ::std::string& VoteType_Name(VoteType value) {
    return Vote_VoteType_Name(value);
  }
  static inline bool VoteType_Parse(const ::std::string& name,
      VoteType* value) {
    return Vote_VoteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 bounty_amount = 1;
  inline bool has_bounty_amount() const;
  inline void clear_bounty_amount();
  static const int kBountyAmountFieldNumber = 1;
  inline ::google::protobuf::int32 bounty_amount() const;
  inline void set_bounty_amount(::google::protobuf::int32 value);

  // required .modelo.User user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::modelo::User& user() const;
  inline ::modelo::User* mutable_user();
  inline ::modelo::User* release_user();
  inline void set_allocated_user(::modelo::User* user);

  // required .modelo.Vote.VoteType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::modelo::Vote_VoteType type() const;
  inline void set_type(::modelo::Vote_VoteType value);

  // required int64 creation_date = 4;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 4;
  inline ::google::protobuf::int64 creation_date() const;
  inline void set_creation_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:modelo.Vote)
 private:
  inline void set_has_bounty_amount();
  inline void clear_has_bounty_amount();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::modelo::User* user_;
  ::google::protobuf::int32 bounty_amount_;
  int type_;
  ::google::protobuf::int64 creation_date_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Vote* default_instance_;
};
// -------------------------------------------------------------------

class History : public ::google::protobuf::Message {
 public:
  History();
  virtual ~History();

  History(const History& from);

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const History& default_instance();

  void Swap(History* other);

  // implements Message ----------------------------------------------

  History* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef History_HistoryType HistoryType;
  static const HistoryType INITIAL_TILE = History_HistoryType_INITIAL_TILE;
  static const HistoryType INITIAL_BODY = History_HistoryType_INITIAL_BODY;
  static const HistoryType INITIAL_TAGS = History_HistoryType_INITIAL_TAGS;
  static const HistoryType EDIT_TITLE = History_HistoryType_EDIT_TITLE;
  static const HistoryType EDIT_BODY = History_HistoryType_EDIT_BODY;
  static const HistoryType EDIT_TAGS = History_HistoryType_EDIT_TAGS;
  static const HistoryType ROLLBACK_TITLE = History_HistoryType_ROLLBACK_TITLE;
  static const HistoryType ROLLBACK_BODY = History_HistoryType_ROLLBACK_BODY;
  static const HistoryType ROLLBACK_TAGS = History_HistoryType_ROLLBACK_TAGS;
  static const HistoryType POST_CLOSED = History_HistoryType_POST_CLOSED;
  static const HistoryType POST_REOPENED = History_HistoryType_POST_REOPENED;
  static const HistoryType POST_DELETED = History_HistoryType_POST_DELETED;
  static const HistoryType POST_UNDELETED = History_HistoryType_POST_UNDELETED;
  static const HistoryType POST_LOCKED = History_HistoryType_POST_LOCKED;
  static const HistoryType POST_UNLOCKED = History_HistoryType_POST_UNLOCKED;
  static const HistoryType COMMUNITY_OWNED = History_HistoryType_COMMUNITY_OWNED;
  static const HistoryType POST_MIGRATED = History_HistoryType_POST_MIGRATED;
  static const HistoryType QUESTION_MERGED = History_HistoryType_QUESTION_MERGED;
  static const HistoryType QUESTION_PROTECTED = History_HistoryType_QUESTION_PROTECTED;
  static const HistoryType QUESTION_UPROTECTED = History_HistoryType_QUESTION_UPROTECTED;
  static const HistoryType POST_DISASSOCIED = History_HistoryType_POST_DISASSOCIED;
  static const HistoryType QUESTION_UNMERGED = History_HistoryType_QUESTION_UNMERGED;
  static const HistoryType SUGGESTED_EDIT_APPLIED = History_HistoryType_SUGGESTED_EDIT_APPLIED;
  static const HistoryType POST_TWEETED = History_HistoryType_POST_TWEETED;
  static const HistoryType COMMENT_DISCUSSION_MOVED_TO_CHAT = History_HistoryType_COMMENT_DISCUSSION_MOVED_TO_CHAT;
  static const HistoryType POST_NOTICE_ADDED = History_HistoryType_POST_NOTICE_ADDED;
  static const HistoryType POST_NOTICE_REMOVED = History_HistoryType_POST_NOTICE_REMOVED;
  static const HistoryType POST_MIGRATED_AWAY = History_HistoryType_POST_MIGRATED_AWAY;
  static const HistoryType POST_MIGRATED_HERE = History_HistoryType_POST_MIGRATED_HERE;
  static const HistoryType POST_MERGE_SOURCE = History_HistoryType_POST_MERGE_SOURCE;
  static const HistoryType POST_MERGE_DESTINATION = History_HistoryType_POST_MERGE_DESTINATION;
  static inline bool HistoryType_IsValid(int value) {
    return History_HistoryType_IsValid(value);
  }
  static const HistoryType HistoryType_MIN =
    History_HistoryType_HistoryType_MIN;
  static const HistoryType HistoryType_MAX =
    History_HistoryType_HistoryType_MAX;
  static const int HistoryType_ARRAYSIZE =
    History_HistoryType_HistoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HistoryType_descriptor() {
    return History_HistoryType_descriptor();
  }
  static inline const ::std::string& HistoryType_Name(HistoryType value) {
    return History_HistoryType_Name(value);
  }
  static inline bool HistoryType_Parse(const ::std::string& name,
      HistoryType* value) {
    return History_HistoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .modelo.User user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::modelo::User& user() const;
  inline ::modelo::User* mutable_user();
  inline ::modelo::User* release_user();
  inline void set_allocated_user(::modelo::User* user);

  // required string revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline const ::std::string& revision() const;
  inline void set_revision(const ::std::string& value);
  inline void set_revision(const char* value);
  inline void set_revision(const char* value, size_t size);
  inline ::std::string* mutable_revision();
  inline ::std::string* release_revision();
  inline void set_allocated_revision(::std::string* revision);

  // required int64 creation_date = 3;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 3;
  inline ::google::protobuf::int64 creation_date() const;
  inline void set_creation_date(::google::protobuf::int64 value);

  // required .modelo.History.HistoryType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::modelo::History_HistoryType type() const;
  inline void set_type(::modelo::History_HistoryType value);

  // required .modelo.RecuentoPalabras comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::modelo::RecuentoPalabras& comment() const;
  inline ::modelo::RecuentoPalabras* mutable_comment();
  inline ::modelo::RecuentoPalabras* release_comment();
  inline void set_allocated_comment(::modelo::RecuentoPalabras* comment);

  // required .modelo.RecuentoPalabras text = 6;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 6;
  inline const ::modelo::RecuentoPalabras& text() const;
  inline ::modelo::RecuentoPalabras* mutable_text();
  inline ::modelo::RecuentoPalabras* release_text();
  inline void set_allocated_text(::modelo::RecuentoPalabras* text);

  // @@protoc_insertion_point(class_scope:modelo.History)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::modelo::User* user_;
  ::std::string* revision_;
  ::google::protobuf::int64 creation_date_;
  ::modelo::RecuentoPalabras* comment_;
  ::modelo::RecuentoPalabras* text_;
  int type_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static History* default_instance_;
};
// -------------------------------------------------------------------

class Post_Stats : public ::google::protobuf::Message {
 public:
  Post_Stats();
  virtual ~Post_Stats();

  Post_Stats(const Post_Stats& from);

  inline Post_Stats& operator=(const Post_Stats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Post_Stats& default_instance();

  void Swap(Post_Stats* other);

  // implements Message ----------------------------------------------

  Post_Stats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Post_Stats& from);
  void MergeFrom(const Post_Stats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 answer_count = 2;
  inline bool has_answer_count() const;
  inline void clear_answer_count();
  static const int kAnswerCountFieldNumber = 2;
  inline ::google::protobuf::int32 answer_count() const;
  inline void set_answer_count(::google::protobuf::int32 value);

  // required int32 comment_count = 3;
  inline bool has_comment_count() const;
  inline void clear_comment_count();
  static const int kCommentCountFieldNumber = 3;
  inline ::google::protobuf::int32 comment_count() const;
  inline void set_comment_count(::google::protobuf::int32 value);

  // required int32 favorite_count = 4;
  inline bool has_favorite_count() const;
  inline void clear_favorite_count();
  static const int kFavoriteCountFieldNumber = 4;
  inline ::google::protobuf::int32 favorite_count() const;
  inline void set_favorite_count(::google::protobuf::int32 value);

  // required int32 view_count = 5;
  inline bool has_view_count() const;
  inline void clear_view_count();
  static const int kViewCountFieldNumber = 5;
  inline ::google::protobuf::int32 view_count() const;
  inline void set_view_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:modelo.Post.Stats)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_answer_count();
  inline void clear_has_answer_count();
  inline void set_has_comment_count();
  inline void clear_has_comment_count();
  inline void set_has_favorite_count();
  inline void clear_has_favorite_count();
  inline void set_has_view_count();
  inline void clear_has_view_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 answer_count_;
  ::google::protobuf::int32 comment_count_;
  ::google::protobuf::int32 favorite_count_;
  ::google::protobuf::int32 view_count_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Post_Stats* default_instance_;
};
// -------------------------------------------------------------------

class Post : public ::google::protobuf::Message {
 public:
  Post();
  virtual ~Post();

  Post(const Post& from);

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Post& default_instance();

  void Swap(Post* other);

  // implements Message ----------------------------------------------

  Post* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Post& from);
  void MergeFrom(const Post& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Post_Stats Stats;

  typedef Post_PostType PostType;
  static const PostType QUESTION = Post_PostType_QUESTION;
  static const PostType ANSWER = Post_PostType_ANSWER;
  static const PostType ORPHANED_TAG_WIKI = Post_PostType_ORPHANED_TAG_WIKI;
  static const PostType TAG_WIKI_EXCERPT = Post_PostType_TAG_WIKI_EXCERPT;
  static const PostType TAG_WIKI = Post_PostType_TAG_WIKI;
  static const PostType MODERATOR_NOMINATION = Post_PostType_MODERATOR_NOMINATION;
  static const PostType WIKI_PLACEHOLDER = Post_PostType_WIKI_PLACEHOLDER;
  static inline bool PostType_IsValid(int value) {
    return Post_PostType_IsValid(value);
  }
  static const PostType PostType_MIN =
    Post_PostType_PostType_MIN;
  static const PostType PostType_MAX =
    Post_PostType_PostType_MAX;
  static const int PostType_ARRAYSIZE =
    Post_PostType_PostType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PostType_descriptor() {
    return Post_PostType_descriptor();
  }
  static inline const ::std::string& PostType_Name(PostType value) {
    return Post_PostType_Name(value);
  }
  static inline bool PostType_Parse(const ::std::string& name,
      PostType* value) {
    return Post_PostType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .modelo.Post parent = 15;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 15;
  inline const ::modelo::Post& parent() const;
  inline ::modelo::Post* mutable_parent();
  inline ::modelo::Post* release_parent();
  inline void set_allocated_parent(::modelo::Post* parent);

  // optional .modelo.Post accepted_answer = 1;
  inline bool has_accepted_answer() const;
  inline void clear_accepted_answer();
  static const int kAcceptedAnswerFieldNumber = 1;
  inline const ::modelo::Post& accepted_answer() const;
  inline ::modelo::Post* mutable_accepted_answer();
  inline ::modelo::Post* release_accepted_answer();
  inline void set_allocated_accepted_answer(::modelo::Post* accepted_answer);

  // required .modelo.User owner = 13;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 13;
  inline const ::modelo::User& owner() const;
  inline ::modelo::User* mutable_owner();
  inline ::modelo::User* release_owner();
  inline void set_allocated_owner(::modelo::User* owner);

  // optional .modelo.User last_editor = 17;
  inline bool has_last_editor() const;
  inline void clear_last_editor();
  static const int kLastEditorFieldNumber = 17;
  inline const ::modelo::User& last_editor() const;
  inline ::modelo::User* mutable_last_editor();
  inline ::modelo::User* release_last_editor();
  inline void set_allocated_last_editor(::modelo::User* last_editor);

  // required .modelo.Post.PostType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::modelo::Post_PostType type() const;
  inline void set_type(::modelo::Post_PostType value);

  // required int64 creation_date = 4;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 4;
  inline ::google::protobuf::int64 creation_date() const;
  inline void set_creation_date(::google::protobuf::int64 value);

  // repeated .modelo.RecuentoPalabras body = 6;
  inline int body_size() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 6;
  inline const ::modelo::RecuentoPalabras& body(int index) const;
  inline ::modelo::RecuentoPalabras* mutable_body(int index);
  inline ::modelo::RecuentoPalabras* add_body();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >&
      body() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >*
      mutable_body();

  // required int32 community_owned_date = 16;
  inline bool has_community_owned_date() const;
  inline void clear_community_owned_date();
  static const int kCommunityOwnedDateFieldNumber = 16;
  inline ::google::protobuf::int32 community_owned_date() const;
  inline void set_community_owned_date(::google::protobuf::int32 value);

  // optional int64 closed_date = 5;
  inline bool has_closed_date() const;
  inline void clear_closed_date();
  static const int kClosedDateFieldNumber = 5;
  inline ::google::protobuf::int64 closed_date() const;
  inline void set_closed_date(::google::protobuf::int64 value);

  // optional int64 last_edit_date = 14;
  inline bool has_last_edit_date() const;
  inline void clear_last_edit_date();
  static const int kLastEditDateFieldNumber = 14;
  inline ::google::protobuf::int64 last_edit_date() const;
  inline void set_last_edit_date(::google::protobuf::int64 value);

  // optional int64 last_activity_date = 18;
  inline bool has_last_activity_date() const;
  inline void clear_last_activity_date();
  static const int kLastActivityDateFieldNumber = 18;
  inline ::google::protobuf::int64 last_activity_date() const;
  inline void set_last_activity_date(::google::protobuf::int64 value);

  // repeated .modelo.RecuentoPalabras title = 7;
  inline int title_size() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 7;
  inline const ::modelo::RecuentoPalabras& title(int index) const;
  inline ::modelo::RecuentoPalabras* mutable_title(int index);
  inline ::modelo::RecuentoPalabras* add_title();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >&
      title() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >*
      mutable_title();

  // required .modelo.Post.Stats stats = 2;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 2;
  inline const ::modelo::Post_Stats& stats() const;
  inline ::modelo::Post_Stats* mutable_stats();
  inline ::modelo::Post_Stats* release_stats();
  inline void set_allocated_stats(::modelo::Post_Stats* stats);

  // repeated .modelo.Link links = 8;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 8;
  inline const ::modelo::Link& links(int index) const;
  inline ::modelo::Link* mutable_links(int index);
  inline ::modelo::Link* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::Link >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::Link >*
      mutable_links();

  // repeated .modelo.Comment comments = 9;
  inline int comments_size() const;
  inline void clear_comments();
  static const int kCommentsFieldNumber = 9;
  inline const ::modelo::Comment& comments(int index) const;
  inline ::modelo::Comment* mutable_comments(int index);
  inline ::modelo::Comment* add_comments();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::Comment >&
      comments() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::Comment >*
      mutable_comments();

  // repeated string tags = 10;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 10;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated .modelo.Vote votes = 11;
  inline int votes_size() const;
  inline void clear_votes();
  static const int kVotesFieldNumber = 11;
  inline const ::modelo::Vote& votes(int index) const;
  inline ::modelo::Vote* mutable_votes(int index);
  inline ::modelo::Vote* add_votes();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::Vote >&
      votes() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::Vote >*
      mutable_votes();

  // repeated .modelo.History history = 12;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 12;
  inline const ::modelo::History& history(int index) const;
  inline ::modelo::History* mutable_history(int index);
  inline ::modelo::History* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::modelo::History >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::modelo::History >*
      mutable_history();

  // @@protoc_insertion_point(class_scope:modelo.Post)
 private:
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_accepted_answer();
  inline void clear_has_accepted_answer();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_last_editor();
  inline void clear_has_last_editor();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();
  inline void set_has_community_owned_date();
  inline void clear_has_community_owned_date();
  inline void set_has_closed_date();
  inline void clear_has_closed_date();
  inline void set_has_last_edit_date();
  inline void clear_has_last_edit_date();
  inline void set_has_last_activity_date();
  inline void clear_has_last_activity_date();
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::modelo::Post* parent_;
  ::modelo::Post* accepted_answer_;
  ::modelo::User* owner_;
  ::modelo::User* last_editor_;
  ::google::protobuf::int64 creation_date_;
  int type_;
  ::google::protobuf::int32 community_owned_date_;
  ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras > body_;
  ::google::protobuf::int64 closed_date_;
  ::google::protobuf::int64 last_edit_date_;
  ::google::protobuf::int64 last_activity_date_;
  ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras > title_;
  ::modelo::Post_Stats* stats_;
  ::google::protobuf::RepeatedPtrField< ::modelo::Link > links_;
  ::google::protobuf::RepeatedPtrField< ::modelo::Comment > comments_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::modelo::Vote > votes_;
  ::google::protobuf::RepeatedPtrField< ::modelo::History > history_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Post* default_instance_;
};
// ===================================================================


// ===================================================================

// RecuentoPalabras

// required string palabra = 1;
inline bool RecuentoPalabras::has_palabra() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecuentoPalabras::set_has_palabra() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecuentoPalabras::clear_has_palabra() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecuentoPalabras::clear_palabra() {
  if (palabra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    palabra_->clear();
  }
  clear_has_palabra();
}
inline const ::std::string& RecuentoPalabras::palabra() const {
  // @@protoc_insertion_point(field_get:modelo.RecuentoPalabras.palabra)
  return *palabra_;
}
inline void RecuentoPalabras::set_palabra(const ::std::string& value) {
  set_has_palabra();
  if (palabra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    palabra_ = new ::std::string;
  }
  palabra_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.RecuentoPalabras.palabra)
}
inline void RecuentoPalabras::set_palabra(const char* value) {
  set_has_palabra();
  if (palabra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    palabra_ = new ::std::string;
  }
  palabra_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.RecuentoPalabras.palabra)
}
inline void RecuentoPalabras::set_palabra(const char* value, size_t size) {
  set_has_palabra();
  if (palabra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    palabra_ = new ::std::string;
  }
  palabra_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.RecuentoPalabras.palabra)
}
inline ::std::string* RecuentoPalabras::mutable_palabra() {
  set_has_palabra();
  if (palabra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    palabra_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.RecuentoPalabras.palabra)
  return palabra_;
}
inline ::std::string* RecuentoPalabras::release_palabra() {
  clear_has_palabra();
  if (palabra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = palabra_;
    palabra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecuentoPalabras::set_allocated_palabra(::std::string* palabra) {
  if (palabra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete palabra_;
  }
  if (palabra) {
    set_has_palabra();
    palabra_ = palabra;
  } else {
    clear_has_palabra();
    palabra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.RecuentoPalabras.palabra)
}

// optional int32 repeticiones = 2 [default = 1];
inline bool RecuentoPalabras::has_repeticiones() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecuentoPalabras::set_has_repeticiones() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecuentoPalabras::clear_has_repeticiones() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecuentoPalabras::clear_repeticiones() {
  repeticiones_ = 1;
  clear_has_repeticiones();
}
inline ::google::protobuf::int32 RecuentoPalabras::repeticiones() const {
  // @@protoc_insertion_point(field_get:modelo.RecuentoPalabras.repeticiones)
  return repeticiones_;
}
inline void RecuentoPalabras::set_repeticiones(::google::protobuf::int32 value) {
  set_has_repeticiones();
  repeticiones_ = value;
  // @@protoc_insertion_point(field_set:modelo.RecuentoPalabras.repeticiones)
}

// -------------------------------------------------------------------

// Link

// required int64 creation_date = 1;
inline bool Link::has_creation_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Link::set_has_creation_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Link::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Link::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
inline ::google::protobuf::int64 Link::creation_date() const {
  // @@protoc_insertion_point(field_get:modelo.Link.creation_date)
  return creation_date_;
}
inline void Link::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Link.creation_date)
}

// optional .modelo.Post related_post = 2;
inline bool Link::has_related_post() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Link::set_has_related_post() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Link::clear_has_related_post() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Link::clear_related_post() {
  if (related_post_ != NULL) related_post_->::modelo::Post::Clear();
  clear_has_related_post();
}
inline const ::modelo::Post& Link::related_post() const {
  // @@protoc_insertion_point(field_get:modelo.Link.related_post)
  return related_post_ != NULL ? *related_post_ : *default_instance_->related_post_;
}
inline ::modelo::Post* Link::mutable_related_post() {
  set_has_related_post();
  if (related_post_ == NULL) related_post_ = new ::modelo::Post;
  // @@protoc_insertion_point(field_mutable:modelo.Link.related_post)
  return related_post_;
}
inline ::modelo::Post* Link::release_related_post() {
  clear_has_related_post();
  ::modelo::Post* temp = related_post_;
  related_post_ = NULL;
  return temp;
}
inline void Link::set_allocated_related_post(::modelo::Post* related_post) {
  delete related_post_;
  related_post_ = related_post;
  if (related_post) {
    set_has_related_post();
  } else {
    clear_has_related_post();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Link.related_post)
}

// required .modelo.Link.LinkType type = 3;
inline bool Link::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Link::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Link::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Link::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::modelo::Link_LinkType Link::type() const {
  // @@protoc_insertion_point(field_get:modelo.Link.type)
  return static_cast< ::modelo::Link_LinkType >(type_);
}
inline void Link::set_type(::modelo::Link_LinkType value) {
  assert(::modelo::Link_LinkType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:modelo.Link.type)
}

// -------------------------------------------------------------------

// Badge

// required string name = 1;
inline bool Badge::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Badge::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Badge::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Badge::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Badge::name() const {
  // @@protoc_insertion_point(field_get:modelo.Badge.name)
  return *name_;
}
inline void Badge::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.Badge.name)
}
inline void Badge::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.Badge.name)
}
inline void Badge::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.Badge.name)
}
inline ::std::string* Badge::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.Badge.name)
  return name_;
}
inline ::std::string* Badge::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Badge::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Badge.name)
}

// required int64 date = 2;
inline bool Badge::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Badge::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Badge::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Badge::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::int64 Badge::date() const {
  // @@protoc_insertion_point(field_get:modelo.Badge.date)
  return date_;
}
inline void Badge::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Badge.date)
}

// -------------------------------------------------------------------

// User

// required int32 views = 1;
inline bool User::has_views() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_views() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_views() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_views() {
  views_ = 0;
  clear_has_views();
}
inline ::google::protobuf::int32 User::views() const {
  // @@protoc_insertion_point(field_get:modelo.User.views)
  return views_;
}
inline void User::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.views)
}

// required int32 reputation = 2;
inline bool User::has_reputation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_reputation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_reputation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_reputation() {
  reputation_ = 0;
  clear_has_reputation();
}
inline ::google::protobuf::int32 User::reputation() const {
  // @@protoc_insertion_point(field_get:modelo.User.reputation)
  return reputation_;
}
inline void User::set_reputation(::google::protobuf::int32 value) {
  set_has_reputation();
  reputation_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.reputation)
}

// required int32 up_votes = 3;
inline bool User::has_up_votes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_up_votes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_up_votes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_up_votes() {
  up_votes_ = 0;
  clear_has_up_votes();
}
inline ::google::protobuf::int32 User::up_votes() const {
  // @@protoc_insertion_point(field_get:modelo.User.up_votes)
  return up_votes_;
}
inline void User::set_up_votes(::google::protobuf::int32 value) {
  set_has_up_votes();
  up_votes_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.up_votes)
}

// required int32 down_votes = 4;
inline bool User::has_down_votes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_down_votes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_down_votes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_down_votes() {
  down_votes_ = 0;
  clear_has_down_votes();
}
inline ::google::protobuf::int32 User::down_votes() const {
  // @@protoc_insertion_point(field_get:modelo.User.down_votes)
  return down_votes_;
}
inline void User::set_down_votes(::google::protobuf::int32 value) {
  set_has_down_votes();
  down_votes_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.down_votes)
}

// required int64 creation_date = 16;
inline bool User::has_creation_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_creation_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
inline ::google::protobuf::int64 User::creation_date() const {
  // @@protoc_insertion_point(field_get:modelo.User.creation_date)
  return creation_date_;
}
inline void User::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.creation_date)
}

// required string display_name = 9;
inline bool User::has_display_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_display_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& User::display_name() const {
  // @@protoc_insertion_point(field_get:modelo.User.display_name)
  return *display_name_;
}
inline void User::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.User.display_name)
}
inline void User::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.User.display_name)
}
inline void User::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.User.display_name)
}
inline ::std::string* User::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.User.display_name)
  return display_name_;
}
inline ::std::string* User::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.User.display_name)
}

// required int64 last_access_date = 10;
inline bool User::has_last_access_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_last_access_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_last_access_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_last_access_date() {
  last_access_date_ = GOOGLE_LONGLONG(0);
  clear_has_last_access_date();
}
inline ::google::protobuf::int64 User::last_access_date() const {
  // @@protoc_insertion_point(field_get:modelo.User.last_access_date)
  return last_access_date_;
}
inline void User::set_last_access_date(::google::protobuf::int64 value) {
  set_has_last_access_date();
  last_access_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.last_access_date)
}

// optional string web_site_url = 15;
inline bool User::has_web_site_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::set_has_web_site_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void User::clear_has_web_site_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void User::clear_web_site_url() {
  if (web_site_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    web_site_url_->clear();
  }
  clear_has_web_site_url();
}
inline const ::std::string& User::web_site_url() const {
  // @@protoc_insertion_point(field_get:modelo.User.web_site_url)
  return *web_site_url_;
}
inline void User::set_web_site_url(const ::std::string& value) {
  set_has_web_site_url();
  if (web_site_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    web_site_url_ = new ::std::string;
  }
  web_site_url_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.User.web_site_url)
}
inline void User::set_web_site_url(const char* value) {
  set_has_web_site_url();
  if (web_site_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    web_site_url_ = new ::std::string;
  }
  web_site_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.User.web_site_url)
}
inline void User::set_web_site_url(const char* value, size_t size) {
  set_has_web_site_url();
  if (web_site_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    web_site_url_ = new ::std::string;
  }
  web_site_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.User.web_site_url)
}
inline ::std::string* User::mutable_web_site_url() {
  set_has_web_site_url();
  if (web_site_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    web_site_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.User.web_site_url)
  return web_site_url_;
}
inline ::std::string* User::release_web_site_url() {
  clear_has_web_site_url();
  if (web_site_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = web_site_url_;
    web_site_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_web_site_url(::std::string* web_site_url) {
  if (web_site_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete web_site_url_;
  }
  if (web_site_url) {
    set_has_web_site_url();
    web_site_url_ = web_site_url;
  } else {
    clear_has_web_site_url();
    web_site_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.User.web_site_url)
}

// optional string profile_image_url = 14;
inline bool User::has_profile_image_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void User::set_has_profile_image_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void User::clear_has_profile_image_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void User::clear_profile_image_url() {
  if (profile_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_image_url_->clear();
  }
  clear_has_profile_image_url();
}
inline const ::std::string& User::profile_image_url() const {
  // @@protoc_insertion_point(field_get:modelo.User.profile_image_url)
  return *profile_image_url_;
}
inline void User::set_profile_image_url(const ::std::string& value) {
  set_has_profile_image_url();
  if (profile_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_image_url_ = new ::std::string;
  }
  profile_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.User.profile_image_url)
}
inline void User::set_profile_image_url(const char* value) {
  set_has_profile_image_url();
  if (profile_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_image_url_ = new ::std::string;
  }
  profile_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.User.profile_image_url)
}
inline void User::set_profile_image_url(const char* value, size_t size) {
  set_has_profile_image_url();
  if (profile_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_image_url_ = new ::std::string;
  }
  profile_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.User.profile_image_url)
}
inline ::std::string* User::mutable_profile_image_url() {
  set_has_profile_image_url();
  if (profile_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    profile_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.User.profile_image_url)
  return profile_image_url_;
}
inline ::std::string* User::release_profile_image_url() {
  clear_has_profile_image_url();
  if (profile_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = profile_image_url_;
    profile_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_profile_image_url(::std::string* profile_image_url) {
  if (profile_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profile_image_url_;
  }
  if (profile_image_url) {
    set_has_profile_image_url();
    profile_image_url_ = profile_image_url;
  } else {
    clear_has_profile_image_url();
    profile_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.User.profile_image_url)
}

// optional string location = 12;
inline bool User::has_location() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void User::set_has_location() {
  _has_bits_[0] |= 0x00000200u;
}
inline void User::clear_has_location() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void User::clear_location() {
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_->clear();
  }
  clear_has_location();
}
inline const ::std::string& User::location() const {
  // @@protoc_insertion_point(field_get:modelo.User.location)
  return *location_;
}
inline void User::set_location(const ::std::string& value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  location_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.User.location)
}
inline void User::set_location(const char* value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  location_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.User.location)
}
inline void User::set_location(const char* value, size_t size) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.User.location)
}
inline ::std::string* User::mutable_location() {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.User.location)
  return location_;
}
inline ::std::string* User::release_location() {
  clear_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = location_;
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_location(::std::string* location) {
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (location) {
    set_has_location();
    location_ = location;
  } else {
    clear_has_location();
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.User.location)
}

// required string about_me = 8;
inline bool User::has_about_me() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void User::set_has_about_me() {
  _has_bits_[0] |= 0x00000400u;
}
inline void User::clear_has_about_me() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void User::clear_about_me() {
  if (about_me_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    about_me_->clear();
  }
  clear_has_about_me();
}
inline const ::std::string& User::about_me() const {
  // @@protoc_insertion_point(field_get:modelo.User.about_me)
  return *about_me_;
}
inline void User::set_about_me(const ::std::string& value) {
  set_has_about_me();
  if (about_me_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    about_me_ = new ::std::string;
  }
  about_me_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.User.about_me)
}
inline void User::set_about_me(const char* value) {
  set_has_about_me();
  if (about_me_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    about_me_ = new ::std::string;
  }
  about_me_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.User.about_me)
}
inline void User::set_about_me(const char* value, size_t size) {
  set_has_about_me();
  if (about_me_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    about_me_ = new ::std::string;
  }
  about_me_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.User.about_me)
}
inline ::std::string* User::mutable_about_me() {
  set_has_about_me();
  if (about_me_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    about_me_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.User.about_me)
  return about_me_;
}
inline ::std::string* User::release_about_me() {
  clear_has_about_me();
  if (about_me_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = about_me_;
    about_me_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_about_me(::std::string* about_me) {
  if (about_me_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete about_me_;
  }
  if (about_me) {
    set_has_about_me();
    about_me_ = about_me;
  } else {
    clear_has_about_me();
    about_me_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.User.about_me)
}

// required int32 account_id = 13;
inline bool User::has_account_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void User::set_has_account_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void User::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void User::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
inline ::google::protobuf::int32 User::account_id() const {
  // @@protoc_insertion_point(field_get:modelo.User.account_id)
  return account_id_;
}
inline void User::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.account_id)
}

// required int32 age = 11;
inline bool User::has_age() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void User::set_has_age() {
  _has_bits_[0] |= 0x00001000u;
}
inline void User::clear_has_age() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void User::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 User::age() const {
  // @@protoc_insertion_point(field_get:modelo.User.age)
  return age_;
}
inline void User::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:modelo.User.age)
}

// repeated .modelo.Badge badges = 7;
inline int User::badges_size() const {
  return badges_.size();
}
inline void User::clear_badges() {
  badges_.Clear();
}
inline const ::modelo::Badge& User::badges(int index) const {
  // @@protoc_insertion_point(field_get:modelo.User.badges)
  return badges_.Get(index);
}
inline ::modelo::Badge* User::mutable_badges(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.User.badges)
  return badges_.Mutable(index);
}
inline ::modelo::Badge* User::add_badges() {
  // @@protoc_insertion_point(field_add:modelo.User.badges)
  return badges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::Badge >&
User::badges() const {
  // @@protoc_insertion_point(field_list:modelo.User.badges)
  return badges_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::Badge >*
User::mutable_badges() {
  // @@protoc_insertion_point(field_mutable_list:modelo.User.badges)
  return &badges_;
}

// -------------------------------------------------------------------

// UserCollection

// repeated .modelo.User usuarios = 1;
inline int UserCollection::usuarios_size() const {
  return usuarios_.size();
}
inline void UserCollection::clear_usuarios() {
  usuarios_.Clear();
}
inline const ::modelo::User& UserCollection::usuarios(int index) const {
  // @@protoc_insertion_point(field_get:modelo.UserCollection.usuarios)
  return usuarios_.Get(index);
}
inline ::modelo::User* UserCollection::mutable_usuarios(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.UserCollection.usuarios)
  return usuarios_.Mutable(index);
}
inline ::modelo::User* UserCollection::add_usuarios() {
  // @@protoc_insertion_point(field_add:modelo.UserCollection.usuarios)
  return usuarios_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::User >&
UserCollection::usuarios() const {
  // @@protoc_insertion_point(field_list:modelo.UserCollection.usuarios)
  return usuarios_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::User >*
UserCollection::mutable_usuarios() {
  // @@protoc_insertion_point(field_mutable_list:modelo.UserCollection.usuarios)
  return &usuarios_;
}

// -------------------------------------------------------------------

// Comment

// required .modelo.User user = 1;
inline bool Comment::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Comment::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Comment::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Comment::clear_user() {
  if (user_ != NULL) user_->::modelo::User::Clear();
  clear_has_user();
}
inline const ::modelo::User& Comment::user() const {
  // @@protoc_insertion_point(field_get:modelo.Comment.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::modelo::User* Comment::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::modelo::User;
  // @@protoc_insertion_point(field_mutable:modelo.Comment.user)
  return user_;
}
inline ::modelo::User* Comment::release_user() {
  clear_has_user();
  ::modelo::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void Comment::set_allocated_user(::modelo::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Comment.user)
}

// required int32 score = 2;
inline bool Comment::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Comment::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Comment::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Comment::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Comment::score() const {
  // @@protoc_insertion_point(field_get:modelo.Comment.score)
  return score_;
}
inline void Comment::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:modelo.Comment.score)
}

// repeated .modelo.RecuentoPalabras text = 3;
inline int Comment::text_size() const {
  return text_.size();
}
inline void Comment::clear_text() {
  text_.Clear();
}
inline const ::modelo::RecuentoPalabras& Comment::text(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Comment.text)
  return text_.Get(index);
}
inline ::modelo::RecuentoPalabras* Comment::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Comment.text)
  return text_.Mutable(index);
}
inline ::modelo::RecuentoPalabras* Comment::add_text() {
  // @@protoc_insertion_point(field_add:modelo.Comment.text)
  return text_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >&
Comment::text() const {
  // @@protoc_insertion_point(field_list:modelo.Comment.text)
  return text_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >*
Comment::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Comment.text)
  return &text_;
}

// required int64 creation_date = 4;
inline bool Comment::has_creation_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Comment::set_has_creation_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Comment::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Comment::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
inline ::google::protobuf::int64 Comment::creation_date() const {
  // @@protoc_insertion_point(field_get:modelo.Comment.creation_date)
  return creation_date_;
}
inline void Comment::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Comment.creation_date)
}

// -------------------------------------------------------------------

// Vote

// required int32 bounty_amount = 1;
inline bool Vote::has_bounty_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vote::set_has_bounty_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vote::clear_has_bounty_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vote::clear_bounty_amount() {
  bounty_amount_ = 0;
  clear_has_bounty_amount();
}
inline ::google::protobuf::int32 Vote::bounty_amount() const {
  // @@protoc_insertion_point(field_get:modelo.Vote.bounty_amount)
  return bounty_amount_;
}
inline void Vote::set_bounty_amount(::google::protobuf::int32 value) {
  set_has_bounty_amount();
  bounty_amount_ = value;
  // @@protoc_insertion_point(field_set:modelo.Vote.bounty_amount)
}

// required .modelo.User user = 2;
inline bool Vote::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vote::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vote::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vote::clear_user() {
  if (user_ != NULL) user_->::modelo::User::Clear();
  clear_has_user();
}
inline const ::modelo::User& Vote::user() const {
  // @@protoc_insertion_point(field_get:modelo.Vote.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::modelo::User* Vote::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::modelo::User;
  // @@protoc_insertion_point(field_mutable:modelo.Vote.user)
  return user_;
}
inline ::modelo::User* Vote::release_user() {
  clear_has_user();
  ::modelo::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void Vote::set_allocated_user(::modelo::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Vote.user)
}

// required .modelo.Vote.VoteType type = 3;
inline bool Vote::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vote::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vote::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vote::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::modelo::Vote_VoteType Vote::type() const {
  // @@protoc_insertion_point(field_get:modelo.Vote.type)
  return static_cast< ::modelo::Vote_VoteType >(type_);
}
inline void Vote::set_type(::modelo::Vote_VoteType value) {
  assert(::modelo::Vote_VoteType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:modelo.Vote.type)
}

// required int64 creation_date = 4;
inline bool Vote::has_creation_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vote::set_has_creation_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vote::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vote::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
inline ::google::protobuf::int64 Vote::creation_date() const {
  // @@protoc_insertion_point(field_get:modelo.Vote.creation_date)
  return creation_date_;
}
inline void Vote::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Vote.creation_date)
}

// -------------------------------------------------------------------

// History

// required .modelo.User user = 1;
inline bool History::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void History::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void History::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void History::clear_user() {
  if (user_ != NULL) user_->::modelo::User::Clear();
  clear_has_user();
}
inline const ::modelo::User& History::user() const {
  // @@protoc_insertion_point(field_get:modelo.History.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::modelo::User* History::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::modelo::User;
  // @@protoc_insertion_point(field_mutable:modelo.History.user)
  return user_;
}
inline ::modelo::User* History::release_user() {
  clear_has_user();
  ::modelo::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void History::set_allocated_user(::modelo::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.History.user)
}

// required string revision = 2;
inline bool History::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void History::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void History::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void History::clear_revision() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_->clear();
  }
  clear_has_revision();
}
inline const ::std::string& History::revision() const {
  // @@protoc_insertion_point(field_get:modelo.History.revision)
  return *revision_;
}
inline void History::set_revision(const ::std::string& value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set:modelo.History.revision)
}
inline void History::set_revision(const char* value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.History.revision)
}
inline void History::set_revision(const char* value, size_t size) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.History.revision)
}
inline ::std::string* History::mutable_revision() {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:modelo.History.revision)
  return revision_;
}
inline ::std::string* History::release_revision() {
  clear_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revision_;
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void History::set_allocated_revision(::std::string* revision) {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (revision) {
    set_has_revision();
    revision_ = revision;
  } else {
    clear_has_revision();
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.History.revision)
}

// required int64 creation_date = 3;
inline bool History::has_creation_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void History::set_has_creation_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void History::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void History::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
inline ::google::protobuf::int64 History::creation_date() const {
  // @@protoc_insertion_point(field_get:modelo.History.creation_date)
  return creation_date_;
}
inline void History::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.History.creation_date)
}

// required .modelo.History.HistoryType type = 4;
inline bool History::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void History::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void History::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void History::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::modelo::History_HistoryType History::type() const {
  // @@protoc_insertion_point(field_get:modelo.History.type)
  return static_cast< ::modelo::History_HistoryType >(type_);
}
inline void History::set_type(::modelo::History_HistoryType value) {
  assert(::modelo::History_HistoryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:modelo.History.type)
}

// required .modelo.RecuentoPalabras comment = 5;
inline bool History::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void History::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void History::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void History::clear_comment() {
  if (comment_ != NULL) comment_->::modelo::RecuentoPalabras::Clear();
  clear_has_comment();
}
inline const ::modelo::RecuentoPalabras& History::comment() const {
  // @@protoc_insertion_point(field_get:modelo.History.comment)
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
}
inline ::modelo::RecuentoPalabras* History::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) comment_ = new ::modelo::RecuentoPalabras;
  // @@protoc_insertion_point(field_mutable:modelo.History.comment)
  return comment_;
}
inline ::modelo::RecuentoPalabras* History::release_comment() {
  clear_has_comment();
  ::modelo::RecuentoPalabras* temp = comment_;
  comment_ = NULL;
  return temp;
}
inline void History::set_allocated_comment(::modelo::RecuentoPalabras* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.History.comment)
}

// required .modelo.RecuentoPalabras text = 6;
inline bool History::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void History::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void History::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void History::clear_text() {
  if (text_ != NULL) text_->::modelo::RecuentoPalabras::Clear();
  clear_has_text();
}
inline const ::modelo::RecuentoPalabras& History::text() const {
  // @@protoc_insertion_point(field_get:modelo.History.text)
  return text_ != NULL ? *text_ : *default_instance_->text_;
}
inline ::modelo::RecuentoPalabras* History::mutable_text() {
  set_has_text();
  if (text_ == NULL) text_ = new ::modelo::RecuentoPalabras;
  // @@protoc_insertion_point(field_mutable:modelo.History.text)
  return text_;
}
inline ::modelo::RecuentoPalabras* History::release_text() {
  clear_has_text();
  ::modelo::RecuentoPalabras* temp = text_;
  text_ = NULL;
  return temp;
}
inline void History::set_allocated_text(::modelo::RecuentoPalabras* text) {
  delete text_;
  text_ = text;
  if (text) {
    set_has_text();
  } else {
    clear_has_text();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.History.text)
}

// -------------------------------------------------------------------

// Post_Stats

// required int32 score = 1;
inline bool Post_Stats::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Post_Stats::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Post_Stats::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Post_Stats::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Post_Stats::score() const {
  // @@protoc_insertion_point(field_get:modelo.Post.Stats.score)
  return score_;
}
inline void Post_Stats::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.Stats.score)
}

// required int32 answer_count = 2;
inline bool Post_Stats::has_answer_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Post_Stats::set_has_answer_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Post_Stats::clear_has_answer_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Post_Stats::clear_answer_count() {
  answer_count_ = 0;
  clear_has_answer_count();
}
inline ::google::protobuf::int32 Post_Stats::answer_count() const {
  // @@protoc_insertion_point(field_get:modelo.Post.Stats.answer_count)
  return answer_count_;
}
inline void Post_Stats::set_answer_count(::google::protobuf::int32 value) {
  set_has_answer_count();
  answer_count_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.Stats.answer_count)
}

// required int32 comment_count = 3;
inline bool Post_Stats::has_comment_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Post_Stats::set_has_comment_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Post_Stats::clear_has_comment_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Post_Stats::clear_comment_count() {
  comment_count_ = 0;
  clear_has_comment_count();
}
inline ::google::protobuf::int32 Post_Stats::comment_count() const {
  // @@protoc_insertion_point(field_get:modelo.Post.Stats.comment_count)
  return comment_count_;
}
inline void Post_Stats::set_comment_count(::google::protobuf::int32 value) {
  set_has_comment_count();
  comment_count_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.Stats.comment_count)
}

// required int32 favorite_count = 4;
inline bool Post_Stats::has_favorite_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Post_Stats::set_has_favorite_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Post_Stats::clear_has_favorite_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Post_Stats::clear_favorite_count() {
  favorite_count_ = 0;
  clear_has_favorite_count();
}
inline ::google::protobuf::int32 Post_Stats::favorite_count() const {
  // @@protoc_insertion_point(field_get:modelo.Post.Stats.favorite_count)
  return favorite_count_;
}
inline void Post_Stats::set_favorite_count(::google::protobuf::int32 value) {
  set_has_favorite_count();
  favorite_count_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.Stats.favorite_count)
}

// required int32 view_count = 5;
inline bool Post_Stats::has_view_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Post_Stats::set_has_view_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Post_Stats::clear_has_view_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Post_Stats::clear_view_count() {
  view_count_ = 0;
  clear_has_view_count();
}
inline ::google::protobuf::int32 Post_Stats::view_count() const {
  // @@protoc_insertion_point(field_get:modelo.Post.Stats.view_count)
  return view_count_;
}
inline void Post_Stats::set_view_count(::google::protobuf::int32 value) {
  set_has_view_count();
  view_count_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.Stats.view_count)
}

// -------------------------------------------------------------------

// Post

// optional .modelo.Post parent = 15;
inline bool Post::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Post::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Post::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Post::clear_parent() {
  if (parent_ != NULL) parent_->::modelo::Post::Clear();
  clear_has_parent();
}
inline const ::modelo::Post& Post::parent() const {
  // @@protoc_insertion_point(field_get:modelo.Post.parent)
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::modelo::Post* Post::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::modelo::Post;
  // @@protoc_insertion_point(field_mutable:modelo.Post.parent)
  return parent_;
}
inline ::modelo::Post* Post::release_parent() {
  clear_has_parent();
  ::modelo::Post* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void Post::set_allocated_parent(::modelo::Post* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Post.parent)
}

// optional .modelo.Post accepted_answer = 1;
inline bool Post::has_accepted_answer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Post::set_has_accepted_answer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Post::clear_has_accepted_answer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Post::clear_accepted_answer() {
  if (accepted_answer_ != NULL) accepted_answer_->::modelo::Post::Clear();
  clear_has_accepted_answer();
}
inline const ::modelo::Post& Post::accepted_answer() const {
  // @@protoc_insertion_point(field_get:modelo.Post.accepted_answer)
  return accepted_answer_ != NULL ? *accepted_answer_ : *default_instance_->accepted_answer_;
}
inline ::modelo::Post* Post::mutable_accepted_answer() {
  set_has_accepted_answer();
  if (accepted_answer_ == NULL) accepted_answer_ = new ::modelo::Post;
  // @@protoc_insertion_point(field_mutable:modelo.Post.accepted_answer)
  return accepted_answer_;
}
inline ::modelo::Post* Post::release_accepted_answer() {
  clear_has_accepted_answer();
  ::modelo::Post* temp = accepted_answer_;
  accepted_answer_ = NULL;
  return temp;
}
inline void Post::set_allocated_accepted_answer(::modelo::Post* accepted_answer) {
  delete accepted_answer_;
  accepted_answer_ = accepted_answer;
  if (accepted_answer) {
    set_has_accepted_answer();
  } else {
    clear_has_accepted_answer();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Post.accepted_answer)
}

// required .modelo.User owner = 13;
inline bool Post::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Post::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Post::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Post::clear_owner() {
  if (owner_ != NULL) owner_->::modelo::User::Clear();
  clear_has_owner();
}
inline const ::modelo::User& Post::owner() const {
  // @@protoc_insertion_point(field_get:modelo.Post.owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
inline ::modelo::User* Post::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) owner_ = new ::modelo::User;
  // @@protoc_insertion_point(field_mutable:modelo.Post.owner)
  return owner_;
}
inline ::modelo::User* Post::release_owner() {
  clear_has_owner();
  ::modelo::User* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline void Post::set_allocated_owner(::modelo::User* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Post.owner)
}

// optional .modelo.User last_editor = 17;
inline bool Post::has_last_editor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Post::set_has_last_editor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Post::clear_has_last_editor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Post::clear_last_editor() {
  if (last_editor_ != NULL) last_editor_->::modelo::User::Clear();
  clear_has_last_editor();
}
inline const ::modelo::User& Post::last_editor() const {
  // @@protoc_insertion_point(field_get:modelo.Post.last_editor)
  return last_editor_ != NULL ? *last_editor_ : *default_instance_->last_editor_;
}
inline ::modelo::User* Post::mutable_last_editor() {
  set_has_last_editor();
  if (last_editor_ == NULL) last_editor_ = new ::modelo::User;
  // @@protoc_insertion_point(field_mutable:modelo.Post.last_editor)
  return last_editor_;
}
inline ::modelo::User* Post::release_last_editor() {
  clear_has_last_editor();
  ::modelo::User* temp = last_editor_;
  last_editor_ = NULL;
  return temp;
}
inline void Post::set_allocated_last_editor(::modelo::User* last_editor) {
  delete last_editor_;
  last_editor_ = last_editor;
  if (last_editor) {
    set_has_last_editor();
  } else {
    clear_has_last_editor();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Post.last_editor)
}

// required .modelo.Post.PostType type = 3;
inline bool Post::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Post::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Post::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Post::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::modelo::Post_PostType Post::type() const {
  // @@protoc_insertion_point(field_get:modelo.Post.type)
  return static_cast< ::modelo::Post_PostType >(type_);
}
inline void Post::set_type(::modelo::Post_PostType value) {
  assert(::modelo::Post_PostType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.type)
}

// required int64 creation_date = 4;
inline bool Post::has_creation_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Post::set_has_creation_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Post::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Post::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
inline ::google::protobuf::int64 Post::creation_date() const {
  // @@protoc_insertion_point(field_get:modelo.Post.creation_date)
  return creation_date_;
}
inline void Post::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.creation_date)
}

// repeated .modelo.RecuentoPalabras body = 6;
inline int Post::body_size() const {
  return body_.size();
}
inline void Post::clear_body() {
  body_.Clear();
}
inline const ::modelo::RecuentoPalabras& Post::body(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.body)
  return body_.Get(index);
}
inline ::modelo::RecuentoPalabras* Post::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.body)
  return body_.Mutable(index);
}
inline ::modelo::RecuentoPalabras* Post::add_body() {
  // @@protoc_insertion_point(field_add:modelo.Post.body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >&
Post::body() const {
  // @@protoc_insertion_point(field_list:modelo.Post.body)
  return body_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >*
Post::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.body)
  return &body_;
}

// required int32 community_owned_date = 16;
inline bool Post::has_community_owned_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Post::set_has_community_owned_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Post::clear_has_community_owned_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Post::clear_community_owned_date() {
  community_owned_date_ = 0;
  clear_has_community_owned_date();
}
inline ::google::protobuf::int32 Post::community_owned_date() const {
  // @@protoc_insertion_point(field_get:modelo.Post.community_owned_date)
  return community_owned_date_;
}
inline void Post::set_community_owned_date(::google::protobuf::int32 value) {
  set_has_community_owned_date();
  community_owned_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.community_owned_date)
}

// optional int64 closed_date = 5;
inline bool Post::has_closed_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Post::set_has_closed_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Post::clear_has_closed_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Post::clear_closed_date() {
  closed_date_ = GOOGLE_LONGLONG(0);
  clear_has_closed_date();
}
inline ::google::protobuf::int64 Post::closed_date() const {
  // @@protoc_insertion_point(field_get:modelo.Post.closed_date)
  return closed_date_;
}
inline void Post::set_closed_date(::google::protobuf::int64 value) {
  set_has_closed_date();
  closed_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.closed_date)
}

// optional int64 last_edit_date = 14;
inline bool Post::has_last_edit_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Post::set_has_last_edit_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Post::clear_has_last_edit_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Post::clear_last_edit_date() {
  last_edit_date_ = GOOGLE_LONGLONG(0);
  clear_has_last_edit_date();
}
inline ::google::protobuf::int64 Post::last_edit_date() const {
  // @@protoc_insertion_point(field_get:modelo.Post.last_edit_date)
  return last_edit_date_;
}
inline void Post::set_last_edit_date(::google::protobuf::int64 value) {
  set_has_last_edit_date();
  last_edit_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.last_edit_date)
}

// optional int64 last_activity_date = 18;
inline bool Post::has_last_activity_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Post::set_has_last_activity_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Post::clear_has_last_activity_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Post::clear_last_activity_date() {
  last_activity_date_ = GOOGLE_LONGLONG(0);
  clear_has_last_activity_date();
}
inline ::google::protobuf::int64 Post::last_activity_date() const {
  // @@protoc_insertion_point(field_get:modelo.Post.last_activity_date)
  return last_activity_date_;
}
inline void Post::set_last_activity_date(::google::protobuf::int64 value) {
  set_has_last_activity_date();
  last_activity_date_ = value;
  // @@protoc_insertion_point(field_set:modelo.Post.last_activity_date)
}

// repeated .modelo.RecuentoPalabras title = 7;
inline int Post::title_size() const {
  return title_.size();
}
inline void Post::clear_title() {
  title_.Clear();
}
inline const ::modelo::RecuentoPalabras& Post::title(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.title)
  return title_.Get(index);
}
inline ::modelo::RecuentoPalabras* Post::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.title)
  return title_.Mutable(index);
}
inline ::modelo::RecuentoPalabras* Post::add_title() {
  // @@protoc_insertion_point(field_add:modelo.Post.title)
  return title_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >&
Post::title() const {
  // @@protoc_insertion_point(field_list:modelo.Post.title)
  return title_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::RecuentoPalabras >*
Post::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.title)
  return &title_;
}

// required .modelo.Post.Stats stats = 2;
inline bool Post::has_stats() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Post::set_has_stats() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Post::clear_has_stats() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Post::clear_stats() {
  if (stats_ != NULL) stats_->::modelo::Post_Stats::Clear();
  clear_has_stats();
}
inline const ::modelo::Post_Stats& Post::stats() const {
  // @@protoc_insertion_point(field_get:modelo.Post.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::modelo::Post_Stats* Post::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::modelo::Post_Stats;
  // @@protoc_insertion_point(field_mutable:modelo.Post.stats)
  return stats_;
}
inline ::modelo::Post_Stats* Post::release_stats() {
  clear_has_stats();
  ::modelo::Post_Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void Post::set_allocated_stats(::modelo::Post_Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:modelo.Post.stats)
}

// repeated .modelo.Link links = 8;
inline int Post::links_size() const {
  return links_.size();
}
inline void Post::clear_links() {
  links_.Clear();
}
inline const ::modelo::Link& Post::links(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.links)
  return links_.Get(index);
}
inline ::modelo::Link* Post::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.links)
  return links_.Mutable(index);
}
inline ::modelo::Link* Post::add_links() {
  // @@protoc_insertion_point(field_add:modelo.Post.links)
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::Link >&
Post::links() const {
  // @@protoc_insertion_point(field_list:modelo.Post.links)
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::Link >*
Post::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.links)
  return &links_;
}

// repeated .modelo.Comment comments = 9;
inline int Post::comments_size() const {
  return comments_.size();
}
inline void Post::clear_comments() {
  comments_.Clear();
}
inline const ::modelo::Comment& Post::comments(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.comments)
  return comments_.Get(index);
}
inline ::modelo::Comment* Post::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.comments)
  return comments_.Mutable(index);
}
inline ::modelo::Comment* Post::add_comments() {
  // @@protoc_insertion_point(field_add:modelo.Post.comments)
  return comments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::Comment >&
Post::comments() const {
  // @@protoc_insertion_point(field_list:modelo.Post.comments)
  return comments_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::Comment >*
Post::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.comments)
  return &comments_;
}

// repeated string tags = 10;
inline int Post::tags_size() const {
  return tags_.size();
}
inline void Post::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Post::tags(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.tags)
  return tags_.Get(index);
}
inline ::std::string* Post::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.tags)
  return tags_.Mutable(index);
}
inline void Post::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:modelo.Post.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Post::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:modelo.Post.tags)
}
inline void Post::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:modelo.Post.tags)
}
inline ::std::string* Post::add_tags() {
  return tags_.Add();
}
inline void Post::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:modelo.Post.tags)
}
inline void Post::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:modelo.Post.tags)
}
inline void Post::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:modelo.Post.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Post::tags() const {
  // @@protoc_insertion_point(field_list:modelo.Post.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Post::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.tags)
  return &tags_;
}

// repeated .modelo.Vote votes = 11;
inline int Post::votes_size() const {
  return votes_.size();
}
inline void Post::clear_votes() {
  votes_.Clear();
}
inline const ::modelo::Vote& Post::votes(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.votes)
  return votes_.Get(index);
}
inline ::modelo::Vote* Post::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.votes)
  return votes_.Mutable(index);
}
inline ::modelo::Vote* Post::add_votes() {
  // @@protoc_insertion_point(field_add:modelo.Post.votes)
  return votes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::Vote >&
Post::votes() const {
  // @@protoc_insertion_point(field_list:modelo.Post.votes)
  return votes_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::Vote >*
Post::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.votes)
  return &votes_;
}

// repeated .modelo.History history = 12;
inline int Post::history_size() const {
  return history_.size();
}
inline void Post::clear_history() {
  history_.Clear();
}
inline const ::modelo::History& Post::history(int index) const {
  // @@protoc_insertion_point(field_get:modelo.Post.history)
  return history_.Get(index);
}
inline ::modelo::History* Post::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:modelo.Post.history)
  return history_.Mutable(index);
}
inline ::modelo::History* Post::add_history() {
  // @@protoc_insertion_point(field_add:modelo.Post.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::modelo::History >&
Post::history() const {
  // @@protoc_insertion_point(field_list:modelo.Post.history)
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::modelo::History >*
Post::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:modelo.Post.history)
  return &history_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace modelo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::modelo::Link_LinkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::modelo::Link_LinkType>() {
  return ::modelo::Link_LinkType_descriptor();
}
template <> struct is_proto_enum< ::modelo::Vote_VoteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::modelo::Vote_VoteType>() {
  return ::modelo::Vote_VoteType_descriptor();
}
template <> struct is_proto_enum< ::modelo::History_HistoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::modelo::History_HistoryType>() {
  return ::modelo::History_HistoryType_descriptor();
}
template <> struct is_proto_enum< ::modelo::Post_PostType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::modelo::Post_PostType>() {
  return ::modelo::Post_PostType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
